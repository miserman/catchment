[{"path":"/articles/casestudy-dmv.html","id":"data-collection","dir":"Articles","previous_headings":"","what":"Data Collection","title":"Case Study - National Capital Region","text":"first step create basic directory structure site, also use organize data collection preprocessing. create dmv_healthcare folder parent current working directory, open site.R file: Calculating catchment area ratio requires least two pieces information: Number location consumers; , total population Census block groups. Number location providers; , number doctors within healthcare facility.","code":"library(community) init_site(\"../dmv_healthcare\", \"dmv_healthcare\")  # specify the main directory for final files maindir <- \"../dmv_healthcare/docs/data/\"  # make a directory to store working data files in oridir <- paste0(maindir, \"original/\") dir.create(oridir, FALSE, TRUE)"},{"path":"/articles/casestudy-dmv.html","id":"consumers","dir":"Articles","previous_headings":"Data Collection","what":"Consumers","title":"Case Study - National Capital Region","text":"using population data U.S. Census Bureau’s American Community Survey (ACS) 5-year estimates. provided state, need collect three states (D.C., Maryland, Virginia), subset counties interest. also download cartographic boundary files mapping, origin-destination employment data commuter-based catchment area.","code":"library(catchment)  # define counties that are part of the capital region dmv_counties <- list(   dc = \"District of Columbia\",   md = c(\"Charles\", \"Frederick\", \"Montgomery\", \"Prince George's\"),   va = c(     \"Alexandria\", \"Arlington\", \"Fairfax\", \"Falls Church\", \"Loudoun\", \"Manassas\",     \"Manassas Park\", \"Prince William\"   ) ) data <- list() shapes <- list()  # download / load for(state in c(\"dc\", \"md\", \"va\")){   # shapes   counties <- download_census_shapes(oridir, state, \"county\", paste0(state, \"_counties\"))   tracts <- download_census_shapes(oridir, state, \"tract\", paste0(state, \"_tracts\"))   blockgroups <- download_census_shapes(oridir, state, \"bg\", paste0(state, \"_blockgroups\"))      ## store subsets to combine later   counties <- counties[counties$NAME %in% dmv_counties[[state]],]   counties[counties$NAME == \"Fairfax\", \"NAME\"] <- c(\"Fairfax City\", \"Fairfax\")   shapes[[state]] <- list(     counties = counties,     tracts = tracts[substr(tracts$GEOID, 1, 5) %in% counties$GEOID,],     blockgroups = blockgroups[substr(blockgroups$GEOID, 1, 5) %in% counties$GEOID,]   )      # population data   data[[state]] <- download_census_population(     oridir, state, 2019, include_margins = TRUE, include_commutes = TRUE,     counties = counties$GEOID, verbose = TRUE   ) }  ## create and save combined shapes library(sf) library(rmapshaper)  for(level in names(shapes$dc)){   st_write(     ms_simplify(do.call(rbind, lapply(shapes, \"[[\", level)), keep_shapes = TRUE),     paste0(maindir, paste0(level, \".geojson\"))   ) }  ## create and save square commutes matrix library(Matrix) commutes <- sparseMatrix(   {}, {}, x = 0,   dims = rowSums(vapply(data, function(d) dim(d$commutes), numeric(2))),   dimnames = rep(list(do.call(c, unname(lapply(data, function(d) colnames(d$commutes))))), 2) ) for(d in data) commutes[rownames(d$commutes), colnames(d$commutes)] <- d$commutes write.csv(   cbind(GEOID = rownames(commutes), as.data.frame(as.matrix(unname(commutes)))),   paste0(maindir, \"commutes.csv\"), row.names = FALSE ) system2(\"bzip2\", shQuote(paste0(maindir, \"commutes.csv\")))  ## create and save combined population data file data_combined <- do.call(rbind, lapply(names(data), function(state){   d <- data[[state]]$estimates   s <- shapes[[state]]$blockgroups   rownames(s) <- s$GEOID   total <- d$TOTAL.POPULATION_Total   total[total == 0] <- 1   data.frame(     GEOID = d$GEOID,     population = d$TOTAL.POPULATION_Total,     percent_female = d$SEX.BY.AGE_Female_Female / total * 100,     percent_white = d$RACE_Total_White.alone / total * 100,     percent_over_49 = rowSums(d[, grep(\"[5-8][05]\", colnames(d))]) / total * 100,     st_coordinates(st_centroid(st_geometry(s[as.character(d$GEOID),])))   ) })) write.csv(data_combined, paste0(maindir, \"data.csv\"), row.names = FALSE)"},{"path":"/articles/casestudy-dmv.html","id":"providers","dir":"Articles","previous_headings":"Data Collection","what":"Providers","title":"Case Study - National Capital Region","text":"doctor information, using Center Medicare & Medicaid Services’s Medicare Physician & Practitioners - Provider dataset.","code":"# set up the url to download from the API providers_url <- paste0(   \"https://data.cms.gov/data-api/v1/dataset/\", # base url   \"a399e5c1-1cd1-4cbe-957f-d2cc8fe5d897/data/\", # dataset id, which specifies year   # filter: state %in% c(\"DC\", \"MD\", \"VA\")   \"?filter[region][condition][path]=Rndrng_Prvdr_State_Abrvtn\",   \"&filter[region][condition][operator]=IN\",   \"&filter[region][condition][value][1]=DC\",   \"&filter[region][condition][value][2]=MD\",   \"&filter[region][condition][value][3]=VA\",   \"&offset=\" # pagination, as only 1000 rows are returned at a time )  # retrieve the data in steps providers <- list() offset <- 0 while(length(raw <- jsonlite::read_json(paste0(providers_url, offset)))){   cat(\"\\rdownloading file\", offset / 1000 + 1, \"     \")   providers[[length(providers) + 1]] <- do.call(rbind, lapply(raw, unlist))   offset <- offset + 1000 } providers <- as.data.frame(do.call(rbind, providers))  # get the ZIP codes within the focal counties county_shapes <- read_sf(paste0(maindir, \"counties.geojson\"), as_tibble = FALSE) geography_ref <- read.csv(   \"https://www2.census.gov/geo/docs/maps-data/data/rel/zcta_county_rel_10.txt\" ) zips <- unique(unlist(lapply(names(dmv_counties), function(state){   GEOIDs <- county_shapes[county_shapes$NAME %in% dmv_counties[[state]], \"GEOID\", drop = TRUE]   formatC(geography_ref[geography_ref$GEOID %in% GEOIDs, \"ZCTA5\"], width = 5, flag = 0) }), use.names = FALSE))  # focus only on medical doctors who aren't also dentists, within the selected counties providers <- providers[   grepl(\"\\\\bm\\\\.?d(?:\\\\W|$)\", providers$Rndrng_Prvdr_Crdntls, TRUE) &     !grepl(\"d\\\\.?d\\\\.?s\", providers$Rndrng_Prvdr_Crdntls, TRUE) &     providers$Rndrng_Prvdr_Zip5 %in% zips, ]  # format address strings, and get the coordinates of each unique entry address_parts <- c(   \"Rndrng_Prvdr_St1\", \"Rndrng_Prvdr_City\", \"Rndrng_Prvdr_State_Abrvtn\", \"Rndrng_Prvdr_Zip5\" )  providers$Rndrng_Prvdr_St1 <- sub(   \"([nesw])\\\\.([nesw])\\\\.*\", \"\\\\1\\\\2\", providers$Rndrng_Prvdr_St1, TRUE ) providers$Rndrng_Prvdr_St1 <- sub(\"\\\\s*#\\\\s.*$\", \"\", providers$Rndrng_Prvdr_St1) providers$Rndrng_Prvdr_St1 <- sub(   \"\\\\s*([nesw]{2})\\\\s.*$\", \" \\\\1\", providers$Rndrng_Prvdr_St1, TRUE ) providers$address <- do.call(paste, c(unname(as.list(providers[, address_parts])), sep = \", \"))  # collapse to locations based on address vars <- c(   \"address\", \"X\", \"Y\", \"Rndrng_Prvdr_Gndr\",   grep(\"^(tot|drug|med|bene)_\", colnames(providers), TRUE, value = TRUE) ) vars <- vars[!vars %in% c(\"Drug_Sprsn_Ind\", \"Med_Sprsn_Ind\")] addresses <- unique(providers$address)  # geocode addresses; takes a while library(parallel)  cl <- makeCluster(detectCores() - 2) address_coords <- as.data.frame(do.call(rbind, parLapply(cl, addresses, function(a){   coords <- tidygeocoder::geo(a, progress_bar = FALSE, quiet = TRUE, method = \"arcgis\")   if(is.na(coords$long)) coords <- tidygeocoder::geo(a, progress_bar = FALSE, quiet = TRUE)   coords }))) rownames(address_coords) <- address_coords$address stopCluster(cl)  # add coordinates to providers data providers[, c(\"Y\", \"X\")] <- address_coords[providers$address, c(\"lat\", \"long\")] providers <- providers[!is.na(providers$X),] providers$locid <- paste0(providers$X, \",\", providers$Y)  provider_locations <- do.call(rbind, lapply(unique(providers$locid), function(l){   d <- providers[providers$locid == l, vars]   d[d == \"\"] <- NA   as.data.frame(list(     address = d[1, \"address\"],     X = d[1, \"X\"],     Y = d[1, \"Y\"],     doctors = nrow(d),     prop_women = mean(d$Rndrng_Prvdr_Gndr == \"F\"),     as.list(colMeans(matrix(       as.numeric(as.matrix(d[, -(1:4)])), nrow(d),       dimnames = list(NULL, vars[-(1:4)])     ), na.rm = TRUE))   )) })) provider_locations[is.na(provider_locations)] <- NA  # identify zip codes that cross counties zip_cross <- substr(unique(do.call(paste0,   geography_ref[geography_ref$ZCTA5 %in% zips, c(\"ZCTA5\", \"GEOID\")] )), 1, 5) zip_cross <- zip_cross[duplicated(zip_cross)]  ## check that those are actually in the focal counties potential_ex <- provider_locations[   grepl(paste0(\"(?:\", paste(zip_cross, collapse = \"|\"), \")$\"), provider_locations$address) &     !grepl(       paste0(\"(?:\", paste(unlist(dmv_counties), collapse = \"|\"), \"),\"),       provider_locations$address     ), ] potential_ex$county <- tidygeocoder::reverse_geo(potential_ex$Y, potential_ex$X, full_results = TRUE)$county provider_locations <- provider_locations[   !provider_locations$address %in% potential_ex[     !is.na(potential_ex$county) & !grepl(       paste0(\"(?:\", paste(unlist(dmv_counties), collapse = \"|\"), \")\"), potential_ex$county     ), \"address\"   ], ]  # make unique IDs for each provider location provider_locations$ID <- paste0(\"l\", seq_len(nrow(provider_locations)))  # save provider locations dataset write.csv(provider_locations, paste0(maindir, \"providers.csv\"), row.names = FALSE)"},{"path":"/articles/casestudy-dmv.html","id":"travel-times","dir":"Articles","previous_headings":"Data Collection","what":"Travel Times","title":"Case Study - National Capital Region","text":"access OSRM server, can get travel times block group provider location: , Sys.getenv(\"OSRM_SERVER\") pointing local server. Instructions set server available Project-OSRM/osrm-backend repository.","code":"library(osrm) options(osrm.server = Sys.getenv(\"OSRM_SERVER\")) traveltimes <- osrmTable(   src = data_combined[1:2, c(\"GEOID\", \"X\", \"Y\")],   dst = provider_locations[1:2, c(\"ID\", \"X\", \"Y\")] )$duration write.csv(   cbind(GEOID = rownames(traveltimes), as.data.frame(as.matrix(traveltimes))),   paste0(maindir, \"traveltimes.csv\"), row.names = FALSE ) system2(\"bzip2\", shQuote(paste0(maindir, \"traveltimes.csv\")))"},{"path":"/articles/casestudy-dmv.html","id":"calculations","dir":"Articles","previous_headings":"","what":"Calculating Floating Catchment Areas","title":"Case Study - National Capital Region","text":"files created previous section: data.csv; population data. blockgroups.geojson; block group shapes mapping. commutes.csv.bz2; data home work block-groups. providers.csv; doctor data. traveltimes.csv.bz2; travel times provider location block group. create files, can download load : getting calculations, can prepare base map added :","code":"library(sf) library(Matrix)  # could set this to a temporary directory if you'd like with # maindir <- paste0(tempdir(), \"/\") if (!exists(\"maindir\")) maindir <- \"../dmv_healthcare/docs/data/\"  # define files with associated object names files <- c(   data_combined = \"data.csv\",   blockgroup_shapes = \"blockgroups.geojson\",   commutes = \"commutes.csv.bz2\",   provider_locations = \"providers.csv\",   traveltimes = \"traveltimes.csv.bz2\" )  # then download and read in those files as needed for (o in names(files)) {   path <- paste0(maindir, files[[o]])   if (!file.exists(path)) {     download.file(       paste0(         \"https://raw.githubusercontent.com/uva-bi-sdad/dmv_healthcare/main/docs/data/\",         files[[o]]       ), path     )   }   if (!exists(o)) {     if (grepl(\".geojson\", files[[o]], fixed = TRUE)) {       assign(o, st_transform(read_sf(path, as_tibble = FALSE), 4326))     } else if (o %in% c(\"commutes\", \"traveltimes\")) {       assign(o, as(as.matrix(read.csv(bzfile(path), row.names = 1)), \"dgCMatrix\"))     } else {       assign(o, read.csv(path))     }   } } library(leaflet)  # if you worked through the first section, you may need to load in the shapes: if (!exists(\"blockgroup_shapes\")) {   blockgroup_shapes <- st_transform(read_sf(     paste0(maindir, \"blockgroups.geojson\"),     as_tibble = FALSE   ), 4326) }  # make sure shapes are in the same order as data rownames(blockgroup_shapes) <- blockgroup_shapes$GEOID blockgroup_shapes <- blockgroup_shapes[as.character(data_combined$GEOID), ]  map <- leaflet(blockgroup_shapes, options = leafletOptions(attributionControl = FALSE)) |>   addProviderTiles(\"CartoDB.Positron\") |>   addScaleBar(\"bottomleft\") |>   addMapPane(\"lines\", zIndex = 410) |>   addMapPane(\"points\", zIndex = 411) |>   addPolygons(     fillColor = colorNumeric(\"RdYlBu\", data_combined$population)(data_combined$population),     fillOpacity = 1, stroke = FALSE, group = \"Population\", label = data_combined$population   ) |>   hideGroup(\"Population\") |>   addLayersControl(     position = \"topleft\", overlayGroups = c(\"Doctors\", \"Population\", \"Access\")   ) |>   addCircles(     data = provider_locations, color = \"#000\", lng = ~X, lat = ~Y,     label = ~ paste0(\"ID: \", ID, \", Doctors: \", doctors),     group = \"Doctors\", options = pathOptions(pane = \"points\")   ) |>   hideGroup(\"Doctors\")"},{"path":"/articles/casestudy-dmv.html","id":"step-floating-catchment-area","dir":"Articles","previous_headings":"Calculating Floating Catchment Areas","what":"2-Step Floating Catchment Area","title":"Case Study - National Capital Region","text":"can start basic form floating catchment area ratio, 2-step floating catchment area (2SFCA; Luo & Wang, 2003), binary weights set range: results may look odd cases, regions several doctors top lower ratios surrounding regions without doctors. cases, simply doctors distributed across regions range, case, distribution uniform distances. course, also case travel particularly difficult region, making everything effectively distant, issue routing engine may make appear way.","code":"library(catchment)  data_combined$doctors_2sfca <- catchment_ratio(   # this specifies consumers, providers, costs, and weights   data_combined, provider_locations, traveltimes, 60,   # this specifies where to find ids and values in the entered consumers and providers objects   consumers_value = \"population\", providers_id = \"ID\", providers_value = \"doctors\",   verbose = TRUE ) #> -- Calculating a Floating Catchment Area Ratio --------------------------------- #> i consumers value: `population` column #> i providers value: `doctors` column #> i consumers id: `GEOID` column #> i providers id: `ID` column #> i cost: `cost` matrix #> i weight: cost over 0 and under 60 #> v calculated 2-step floating catchment area (resources per consumer)  # for better display, we will multiply scores by 1,000 for doctors per 1,000 people data_combined$doctors_2sfca <- data_combined$doctors_2sfca * 1000  # now make a map of the results pal <- colorBin(\"RdYlBu\", data_combined$doctors_2sfca) map |>   addControl(\"Doctors Per 1,000 People (2-Step Floating Catchment Area)\", \"topright\") |>   showGroup(\"Doctors\") |>   addLegend(\"bottomright\", pal, data_combined$doctors_2sfca, opacity = 1) |>   addPolygons(     fillColor = pal(data_combined$doctors_2sfca), fillOpacity = 1, weight = 1, color = \"#000\",     highlightOptions = highlightOptions(color = \"#fff\"), group = \"Access\",     label = paste0(       \"GEOID: \", data_combined$GEOID, \", Population: \", data_combined$population,       \", Per 1k People: \", round(data_combined$doctors_2sfca, 4), \", In Region: \",       round(data_combined$population * data_combined$doctors_2sfca / 1000, 4)     )   )"},{"path":"/articles/casestudy-dmv.html","id":"step-floating-catchment-area-with-euclidean-distances","dir":"Articles","previous_headings":"Calculating Floating Catchment Areas","what":"2-Step Floating Catchment Area with Euclidean Distances","title":"Case Study - National Capital Region","text":"variants 2- 3-step floating catchment area come differences weight schemes, looking , might compare differences cost, travel times pre-calculated, simpler Euclidean distances: Differences reflect travel difficulty relative uniform, highlights regions particularly difficult terrain (within road networks; least estimated routing machine). can use catchment_connections function directly inspect regions particular difficulty: , seems routing machine trouble regions nearest cluster providers, considering distant block groups range. also looks like provider l820 range isn’t travel time. reflected difference travel-time- Euclidean-based costs, can check directly see inverse relationship:","code":"data_combined$doctors_2sfca_euclidean <- catchment_ratio(   # to get Euclidean distances between coordinates, we can just leave cost unspecified   # but since these are on a difference scale, we will need to set a different weight cutoff   data_combined, provider_locations,   weight = .54,   consumers_value = \"population\", providers_id = \"ID\", providers_value = \"doctors\",   # if the coordinate columns were not the default (X = Longitude, Y = Latitude),   # you could specify them here, such as with providers_location = c(\"long\", \"lat\")   verbose = TRUE ) * 1000 #> -- Calculating a Floating Catchment Area Ratio --------------------------------- #> i consumers value: `population` column #> i providers value: `doctors` column #> i consumers id: `GEOID` column #> i providers id: `ID` column #> calculating cost from locations... #> i consumers location: `consumers` columns (X and Y) #> i providers location: `providers` columns (X and Y) #> i cost: calculated Euclidean distances #> i weight: cost over 0 and under 0.54 #> v calculated 2-step floating catchment area (resources per consumer)  # to compare, we might look at the difference between values calculated with travel times versus # Euclidean distances traveltime_vs_euclidean <- data_combined$doctors_2sfca - data_combined$doctors_2sfca_euclidean  pal <- colorBin(\"RdYlBu\", traveltime_vs_euclidean) map |>   addControl(paste(     \"Difference Between 2-Step Floating Catchment Areas Calculated with Euclidean Distance\",     \"(lower) VS Travel Times (higher)\"   ), \"topright\") |>   addLegend(\"bottomright\", pal, traveltime_vs_euclidean, opacity = .7) |>   addPolygons(     fillColor = pal(traveltime_vs_euclidean), fillOpacity = .7, weight = 1, color = \"#000\",     highlightOptions = highlightOptions(color = \"#fff\"), group = \"Access\",     label = paste(\"Travel Time - Euclidean:\", traveltime_vs_euclidean)   ) # identify a few block groups of interest IDs <- c(\"240178504003\", \"240178505001\", \"240178505002\", \"240178511002\") rownames(data_combined) <- data_combined$GEOID  # extract connections between each of them and providers in range connections <- catchment_connections(   data_combined[IDs, ], provider_locations, traveltimes, 60,   to_id = \"ID\",   return_type = \"sf\" )  map |>   setView(-77, 38.5, 11) |>   addTiles() |>   addPolygons(     fillColor = pal(traveltime_vs_euclidean), fillOpacity = .5, weight = 1,     color = \"#000\", highlightOptions = highlightOptions(color = \"#fff\"), group = \"Access\",     label = paste(\"Travel Time - Euclidean:\", traveltime_vs_euclidean)   ) |>   addPolylines(     data = connections, weight = 3, color = \"#777\", options = pathOptions(pane = \"lines\"),     highlightOptions = highlightOptions(color = \"#fff\", weight = 4),     label = ~ paste0(\"From: \", from, \", To: \", to, \", Weight: \", weight, \", Cost: \", cost)   ) |>   addCircles(     data = data_combined[IDs, ], weight = 10, lng = ~X, lat = ~Y,     label = ~ paste0(\"GEOID: \", GEOID, \", Population: \", population),     options = pathOptions(pane = \"points\")   ) |>   showGroup(\"Doctors\") data.frame(   travel_time = traveltimes[IDs, \"l820\"],   euclidean = sqrt(rowSums((     data_combined[IDs, c(\"Y\", \"X\")] - rep(as.numeric(       provider_locations[provider_locations$ID == \"l820\", c(\"Y\", \"X\")]     ), each = 4)   )^2)) * 1000 ) #>              travel_time euclidean #> 240178504003        86.6 197.16918 #> 240178505001       104.4  91.91394 #> 240178505002       105.5  55.93802 #> 240178511002       105.5  71.93603"},{"path":"/articles/casestudy-dmv.html","id":"enhanced-2-step-floating-catchment-area","dir":"Articles","previous_headings":"Calculating Floating Catchment Areas","what":"Enhanced 2-Step Floating Catchment Area","title":"Case Study - National Capital Region","text":"Enhanced 2-step floating catchment areas (E2SFCA; Luo & Qi, 2009) form non-uniform weights, originally applied travel-time-based bins, making weights decreased steps away center catchment area: binary step-weighted variants, generally redistribution away larger, distant regions (red) toward smaller regions nearer cluster doctors (blue), though seems mostly happen D.C. area, nearly reverse northern Maryland regions.","code":"step_weights <- list(c(60, .042), c(30, .377), c(20, .704), c(10, .962)) data_combined$doctors_e2sfca <- catchment_ratio(   data_combined, provider_locations, traveltimes, step_weights,   consumers_value = \"population\", providers_id = \"ID\", providers_value = \"doctors\",   verbose = TRUE ) * 1000 #> -- Calculating a Floating Catchment Area Ratio --------------------------------- #> i consumers value: `population` column #> i providers value: `doctors` column #> i consumers id: `GEOID` column #> i providers id: `ID` column #> i cost: `cost` matrix #> i weight: cost over 0 and under steps of `weight` #> v calculated 2-step floating catchment area (resources per consumer)  binary_vs_step <- data_combined$doctors_e2sfca - data_combined$doctors_2sfca  pal <- colorBin(\"RdYlBu\", binary_vs_step) map |>   addControl(paste(     \"Difference Between 2-Step Floating Catchment Areas Calculated with Binary\",     \"(lower) VS Step (higher) Weights\"   ), \"topright\") |>   addLegend(\"bottomright\", pal, binary_vs_step, opacity = .7) |>   addPolygons(     fillColor = pal(binary_vs_step), fillOpacity = .7, weight = 1, color = \"#000\",     highlightOptions = highlightOptions(color = \"#fff\"), group = \"Access\",     label = paste(\"Step - Binary:\", binary_vs_step)   )"},{"path":"/articles/casestudy-dmv.html","id":"kernel-density-2-step-floating-catchment-area","dir":"Articles","previous_headings":"Calculating Floating Catchment Areas","what":"Kernel Density 2-Step Floating Catchment Area","title":"Case Study - National Capital Region","text":"Another enhanced 2-step floating catchment area can use continuous weights, rather binned steps, sometimes called kernel density 2-step floating catchment area (KD2SFCA; Dai, 2010). , apply Gaussian decay function within catchment areas, compare step-weighted scores: least case, continuous weights seem better reflect absence doctors larger regions extremities main metropolitan area (mostly negative values, showing get lower scores continuous weights). also redistribution densely populated areas, perhaps due smoother drop-distance.","code":"data_combined$doctors_kd2sfca <- catchment_ratio(   data_combined, provider_locations, traveltimes, \"gaussian\", scale = 19,   consumers_value = \"population\", providers_id = \"ID\", providers_value = \"doctors\",   verbose = TRUE ) * 1000 #> -- Calculating a Floating Catchment Area Ratio --------------------------------- #> i consumers value: `population` column #> i providers value: `doctors` column #> i consumers id: `GEOID` column #> i providers id: `ID` column #> i cost: `cost` matrix #> i weight: gaussian weight function #> v calculated 2-step floating catchment area (resources per consumer)  step_vs_continuous <- data_combined$doctors_kd2sfca - data_combined$doctors_e2sfca  pal <- colorBin(\"RdYlBu\", step_vs_continuous) map |>   addControl(paste(     \"Difference Between 2-Step Floating Catchment Areas Calculated with Step\",     \"(lower) VS Continuous (higher) Weights\"   ), \"topright\") |>   addLegend(\"bottomright\", pal, step_vs_continuous, opacity = .7) |>   addPolygons(     fillColor = pal(step_vs_continuous), fillOpacity = .7, weight = 1, color = \"#000\",     highlightOptions = highlightOptions(color = \"#fff\"), group = \"Access\",     label = paste(\"Continuous - Step:\", step_vs_continuous)   )"},{"path":"/articles/casestudy-dmv.html","id":"step-floating-catchment-area-1","dir":"Articles","previous_headings":"Calculating Floating Catchment Areas","what":"3-Step Floating Catchment Area","title":"Case Study - National Capital Region","text":"3-step floating catchment areas (3SFCA; Wan et al., 2012) incorporate normalized weights try account potential -influence regions range multiple providers: expected general reduction main metropolitan area, providers selectively redistributed might see simply increasing size catchment areas homogenizing weights, work make scores uniform.","code":"data_combined$doctors_3sfca <- catchment_ratio(   data_combined, provider_locations, traveltimes, step_weights,   normalize_weight = TRUE,   consumers_value = \"population\", providers_id = \"ID\", providers_value = \"doctors\",   verbose = TRUE ) * 1000 #> -- Calculating a Floating Catchment Area Ratio --------------------------------- #> i consumers value: `population` column #> i providers value: `doctors` column #> i consumers id: `GEOID` column #> i providers id: `ID` column #> i cost: `cost` matrix #> i weight: cost over 0 and under steps of `weight` #> i normalizing weight #> v calculated 3-step floating catchment area (resources per consumer)  two_vs_three <- data_combined$doctors_3sfca - data_combined$doctors_e2sfca  pal <- colorBin(\"RdYlBu\", two_vs_three) map |>   addControl(     \"Difference Between 2- (lower) and 3- (higher) Step Floating Catchment Areas\", \"topright\"   ) |>   showGroup(\"Doctors\") |>   addLegend(\"bottomright\", pal, two_vs_three, opacity = .7) |>   addPolygons(     fillColor = pal(two_vs_three), fillOpacity = .7, weight = 1, color = \"#000\",     highlightOptions = highlightOptions(color = \"#fff\"), group = \"Access\",     label = paste(\"three - enhanced two:\", two_vs_three)   )"},{"path":"/articles/casestudy-dmv.html","id":"commuter-based-3-step-floating-catchment-area","dir":"Articles","previous_headings":"Calculating Floating Catchment Areas","what":"Commuter-Based 3-Step Floating Catchment Area","title":"Case Study - National Capital Region","text":"final variant incorporate commuter data collected (along lines commuter-based 2-step floating catchment area; CB2SFCA; Fransen et al., 2015), give portions population centers wider range options:","code":"data_combined$doctors_cb3sfca <- catchment_ratio(   data_combined, provider_locations, traveltimes, step_weights,   normalize_weight = TRUE,   consumers_value = \"population\", providers_id = \"ID\", providers_value = \"doctors\",   consumers_commutes = commutes ) * 1000  single_vs_multi <- data_combined$doctors_cb3sfca - data_combined$doctors_3sfca  pal <- colorBin(\"RdYlBu\", single_vs_multi) map |>   addControl(     paste(       \"Difference Between 3-Step Floating Catchment Areas with Single (lower) VS\",       \"Multiple (higher) origins\"     ), \"topright\"   ) |>   addLegend(\"bottomright\", pal, single_vs_multi, opacity = .7) |>   addPolygons(     fillColor = pal(single_vs_multi), fillOpacity = .7, weight = 1, color = \"#000\",     highlightOptions = highlightOptions(color = \"#fff\"), group = \"Access\",     label = paste(\"Multiple - Single:\", single_vs_multi)   )"},{"path":"/articles/casestudy-dmv.html","id":"limitations","dir":"Articles","previous_headings":"","what":"Limitations","title":"Case Study - National Capital Region","text":"One limitation comes commuter-based catchment area lack data home work commutes cross state lines, particularly relevant national capital region large urban area spans three states. means state populations artificially biased toward providers within state degree commute --state far enough reach providers. Consumers can still utilize providers states close enough border, highlights another limitation affects variants. First, two aspects catchment areas understand: One catchment areas form networks, connection one consumer one provider affects connections provider connected consumer, consumers connected provider. sense, fully account distribution within catchment area, need know connected areas. Two catchment areas models, means overly simplified, become realistic added information. aspects mind, consider happens edges general region interest. including consumers providers fall within counties make national capital region, just beyond largely arbitrary boundaries, consumers providers likely enter network. Artificially cutting consideration beyond boundaries creates sort warping, parts catchment areas around consumers providers effectively cut . Fully addressing limitation might require calculating ratios globally, enough practical benefit might gained including surrounding states, even just parts states fall within buffer around focal region.","code":""},{"path":[]},{"path":"/articles/introduction.html","id":"basic-example","dir":"Articles","previous_headings":"","what":"Basic Example","title":"Introduction to Floating Catchment Areas","text":"basic case floating catchment areas differ simple ratios multiple providers differing overlapping coverage consumers. Lets make small set providers consumers: catchment area (like city), just sum ratio: imagine providers differing consumer bases: can visualize like structural equation model directed graph, circles around providers representing catchment areas: introduces concept weights, instantiation catchment areas. previous example, applied weights vector vector manually, easier way bigger examples use matrix: catchment_ratio function : called 2-step floating catchment area (2SFCA; Luo & Wang, 2003) effectively combining catchment areas around providers (step 1) consumers (step 2).","code":"# each entry in the vector represents a location, and its value is # its quantity (e.g., number of doctors and possible patients) (providers <- c(5, 5)) #> [1] 5 5 (consumers <- c(10, 10, 10)) #> [1] 10 10 10 sum(providers) / sum(consumers) #> [1] 0.3333333 # we can represent consumer bases with binary vectors, # where 1 means in range and 0 means out of range in_range_p1 <- c(1, 1, 0) # provider 1 is in range of consumers 1 and 2 in_range_p2 <- c(0, 1, 1) # provider 2 is in range of consumers 2 and 3 ## this is the ratio for provider 1 -- ## provider / sum of consumers in range (ratio_p1 <- providers[1] / sum(in_range_p1 * consumers)) #> [1] 0.25  ### same as providers[1] / (consumers[1] + consumers[2]) #> [1] 0.25  ## which applies to consumers 1 and 2, again represented by the weight vector (access_p1 <- in_range_p1 * ratio_p1) #> [1] 0.25 0.25 0.00  ## same for provider 2 (ratio_p2 <- providers[2] / sum(in_range_p2 * consumers)) #> [1] 0.25 (access_p2 <- in_range_p2 * ratio_p2) #> [1] 0.00 0.25 0.25  ## and now we can combine them for individualized access scores access_p1 + access_p2 #> [1] 0.25 0.50 0.25 # we can add both `in_range` vectors to a matrix (weight <- matrix(c(in_range_p1, in_range_p2), 3)) #>      [,1] [,2] #> [1,]    1    0 #> [2,]    1    1 #> [3,]    0    1  # then do everything in one line for the same result weight %*% (providers / crossprod(weight, consumers)) #>      [,1] #> [1,] 0.25 #> [2,] 0.50 #> [3,] 0.25 library(catchment) (access_uniform <- catchment_ratio(consumers, providers, weight = weight)) #> [1] 0.25 0.50 0.25"},{"path":"/articles/introduction.html","id":"variable-weights","dir":"Articles","previous_headings":"","what":"Variable Weights","title":"Introduction to Floating Catchment Areas","text":"Binary weight vectors denote consumers fall within catchment area, imply consumers fall within catchment area degree – consumers get weight 1. providers tend physical locations consumers must travel , creates variability access within catchment areas; consumers closer provider location easier time getting provider, likely go provider distant alternative. appreciate difference, can adjust weights distance. previous example, imagine separated providers , keeping consumers 2 close providers 1: Compared uniformly weighted scores, consumer 3 gets higher score since less competition distant consumer 2, consumer 2 gets dampened score distance. Adjusting weights like results enhanced 2-step floating catchment area (E2SFCA; Luo & Qi, 2009). Note still just distributing providers consumers, region scores sum number providers: weights applied steps, sides ratio, absolute scale weights arbitrary. example, multiply weights 100 get result: may counterintuitive relative difference held constant. example, catchment area includes 1 provider 1 consumer, consumer always get access score 1 (1 / 1) regardless weight, long range – 10 minutes provider 2 hours get score. highlights potential issue interpretation catchment ratios: modestly allocations providers consumers. Weights work adjust allocations, always end number providers consumers within range. , given positive set weights, scores can range 0 1. Scores 0 location weight 0, scores reach 1 location range – otherwise scores infinity approach 0 1 relative difference weights increase. can see simple simulation:","code":"## as before, we can specify weights in vectors weight_p1 <- c(.9, .9, 0) weight_p2 <- c(0, .2, .9)  # now we can perform the same vector-wise calculations (ratio_p1 <- providers[1] / sum(weight_p1 * consumers)) #> [1] 0.2777778 (access_p1 <- weight_p1 * ratio_p1) #> [1] 0.25 0.25 0.00  (ratio_p2 <- providers[2] / sum(weight_p2 * consumers)) #> [1] 0.4545455 (access_p2 <- weight_p2 * ratio_p2) #> [1] 0.00000000 0.09090909 0.40909091  access_p1 + access_p2 #> [1] 0.2500000 0.3409091 0.4090909  # or use a weight matrix (weight <- matrix(c(weight_p1, weight_p2), 3)) #>      [,1] [,2] #> [1,]  0.9  0.0 #> [2,]  0.9  0.2 #> [3,]  0.0  0.9 weight %*% (providers / crossprod(weight, consumers)) #>           [,1] #> [1,] 0.2500000 #> [2,] 0.3409091 #> [3,] 0.4090909  # or the `catchment_ratio` function (access <- catchment_ratio(consumers, providers, weight = weight)) #> [1] 0.2500000 0.3409091 0.4090909  ## compare to the uniform weights access - access_uniform #> [1]  0.0000000 -0.1590909  0.1590909 # original ratios are providers per person, so multiplying by consumers gives providers per location sum(consumers * (access_p1 + access_p2)) #> [1] 10  # this is what the \"region\" `return_type` gives sum(catchment_ratio(   consumers, providers,   weight = weight,   normalize_weight = TRUE, return_type = \"region\" )) #> [1] 10 catchment_ratio(consumers, providers, weight = weight * 100) #> [1] 0.2500000 0.3409091 0.4090909 library(splot) splot(   # here, consumers 2 retain their relative weight between providers,   # but increase their relative weight from consumers 1 and 3   t(vapply(seq(1, 100, .5), function(i) {     catchment_ratio(       consumers, providers,       weight = matrix(c(.9, .9 * i, 0, 0, .2 * i, .9), 3)     )   }, numeric(3))) ~ seq(0, 99, .5),   title = FALSE, lines = FALSE, leg.title = \"Consumers\", lpos = \"right\",   laby = \"Catchment Ratio\", labx = \"Relative Difference\" ) # consumers 2 go from having middling access catchment_ratio(   consumers, providers,   weight = matrix(c(.9, .9 * 1, 0, 0, .2 * 1, .9), 3) ) #> [1] 0.2500000 0.3409091 0.4090909  # to having nearly exclusive access catchment_ratio(   consumers, providers,   weight = matrix(c(.9, .9 * 100, 0, 0, .2 * 100, .9), 3) ) #> [1] 0.004950495 0.973518404 0.021531100  # but they will never have entirely exclusive access so long as consumers 1 and 3 have any weight catchment_ratio(   consumers, providers,   weight = matrix(c(.9, .9 * 1e99, 0, 0, .2 * 1e99, .9), 3) ) #> [1] 5.00e-100  1.00e+00  2.25e-99"},{"path":"/articles/introduction.html","id":"normalized-weights","dir":"Articles","previous_headings":"","what":"Normalized Weights","title":"Introduction to Floating Catchment Areas","text":"interesting potentially clarifying way think weights relative probabilities consumer utilize one provider another. makes good sense distance weighting, , else equal, consumer less likely make use distant provider nearer one available. Thinking weights way highlights potential issue way applying weights: providers consumer range, overall weight get, doesn’t make sense consumers’ consumption actually (say, consumer patient visiting one doctor). account , might normalize consumer’s weights proportionally redistributing : normalized weights, consumers 1 3 get higher access score consumer 2 now (appropriately?) spread across 2 providers range – consumers 1 3 may ones using provider, depending consumers 2 go. always, still just redistributions number providers: weights normalized way, called 3-step floating catchment area (3SFCA; Wan et al., 2012). Note , though original 3-step floating catchment area used enhanced 2-step floating catchment area weights, can applied weighting scheme. also notable sort normalization might slightly -correct – case, consumers 2 gets less total weight 1 3. might make sense give everyone weight 1 using weight proportions directly: case, proportional weighting resulted slightly better access consumers 2 moved closer providers 2 relative weight. can directly seen weights scale: Normalizing weights way removes absolute differences weight consumer locations, making even distribution consumers. Though, consider looks like previous simulation: , proportional weights, consumers can shift around providers, nearer farther set providers. Proportional weighting similar adjustment proposed Paez et al. (2019), except also propose independently adjusting provider-side weights weights across providers also sum 1. may advisable two reasons: First independently adjusting weights may result different number providers distributed (see Imperfect Distribution section). Second column standardization doesn’t seem make difference final access scores:","code":"# get each consumer's total weight (consumer_weight <- rowSums(weight)) #> [1] 0.9 1.1 0.9  # then calculate proportional weights (weight_prop <- weight / consumer_weight) #>           [,1]      [,2] #> [1,] 1.0000000 0.0000000 #> [2,] 0.8181818 0.1818182 #> [3,] 0.0000000 1.0000000  # and multiply by them -- each original weight gets a portion of its consumer's total weight (weight_normed <- weight * weight_prop) #>           [,1]       [,2] #> [1,] 0.9000000 0.00000000 #> [2,] 0.7363636 0.03636364 #> [3,] 0.0000000 0.90000000  # now just replace the original weights with the normalized ones weight_normed %*% (providers / crossprod(weight_normed, consumers)) #>           [,1] #> [1,] 0.2750000 #> [2,] 0.2444175 #> [3,] 0.4805825  # this is what the `normalize_weight` argument does (access_normed <- catchment_ratio(consumers, providers, weight = weight, normalize_weight = TRUE)) #> [1] 0.2750000 0.2444175 0.4805825  # compare with original access_normed - access #> [1]  0.02500000 -0.09649162  0.07149162 sum(access_normed * consumers) #> [1] 10 # total normed weights rowSums(weight_normed) #> [1] 0.9000000 0.7727273 0.9000000  # total proportional weights rowSums(weight_prop) #> [1] 1 1 1  # scores with weight proportions (access_prop <- catchment_ratio(consumers, providers, weight = weight_prop)) #> [1] 0.2750000 0.3019231 0.4230769  # compare with normed access_prop - access_normed #> [1]  0.0000000  0.0575056 -0.0575056 weight_prop - weight_normed / max(weight_normed) #>      [,1]      [,2] #> [1,]    0 0.0000000 #> [2,]    0 0.1414141 #> [3,]    0 0.0000000 splot(   t(vapply(seq(1, 100, .5), function(i) {     catchment_ratio(       consumers, providers,       weight = matrix(c(.9, .9 * i, 0, 0, .2 * i, .9), 3) / c(.9, 1.1 * i, .9)     )   }, numeric(3))) ~ seq(1, 100, .5) - 1,   title = FALSE, lines = FALSE, leg.title = \"Consumers\", lpos = \"right\",   laby = \"Catchment Ratio\", labx = \"(would-be) Relative Difference\" ) # balanced floating catchment area (BFCS) (access_balanced <- catchment_ratio(   consumers, providers,   weight = weight,   adjust_consumers = function(w) w / rowSums(w),   adjust_providers = function(w) sweep(w, 2, colSums(w), \"/\") )) #> [1] 0.1375000 0.2144231 0.3461538  ## no longer sums to the number of providers sum(consumers * access_balanced) #> [1] 6.980769  # with only column-standardized weights (access_colnorm <- catchment_ratio(   consumers, providers,   weight = sweep(weight, 2, colSums(weight), \"/\") )) #> [1] 0.2500000 0.3409091 0.4090909  ## same as original access_colnorm - access #> [1] 0 0 0"},{"path":"/articles/introduction.html","id":"expanding-weights","dir":"Articles","previous_headings":"","what":"Expanding Weights","title":"Introduction to Floating Catchment Areas","text":"commonly applied weights based physical distance, thinking weights generally describing probability consumer use particular provider, might imagine number weight sources.","code":""},{"path":[]},{"path":"/articles/introduction.html","id":"categorical","dir":"Articles","previous_headings":"Expanding Weights > Provider-Consumer Fit","what":"Categorical","title":"Introduction to Floating Catchment Areas","text":"example, relating doctors patients, health insurance networks may quite strictly condition consumer provider pairings. Things like can added weights arbitrarily: added insurance weights, access score consumers 1 goes quite lot -network providers range.","code":"# lets say our consumers and providers are all associated with one of two networks provider_networks <- c(\"a\", \"b\") consumer_networks <- c(\"b\", \"a\", \"b\")  # we can assign weights based on matches (insurance_weight <- matrix(c(   consumer_networks == provider_networks[1],   consumer_networks == provider_networks[2] ), 3) * .9 + .1) #>      [,1] [,2] #> [1,]  0.1  1.0 #> [2,]  1.0  0.1 #> [3,]  0.1  1.0  # then incorporate them with our distance-based weights (access_insurance <- catchment_ratio(consumers, providers, weight = weight * insurance_weight)) #> [1] 0.04545455 0.46541502 0.48913043  ## compare with originals access_insurance - access #> [1] -0.20454545  0.12450593  0.08003953"},{"path":"/articles/introduction.html","id":"continuous","dir":"Articles","previous_headings":"Expanding Weights > Provider-Consumer Fit","what":"Continuous","title":"Introduction to Floating Catchment Areas","text":"Another relevant point consumer decision might cost versus income: subtler weighting, score consumers 1 goes bit particular consumers 2 pushed toward providers 2 based monetary cost, even though travel cost greater. information might useful incorporate much relative weight get questions probably want explored case case basis.","code":"# say we had some sort of price associated with each provider location provider_price <- c(400, 250)  # and the average monthly income of each consumer location consumer_income <- c(70, 30, 50) * 1000 / 12  # we can use this to get at a price weight -- # the higher the proportion of monthly income their price is, # the less likely a consumer is to use that provider (monetary_cost <- 1 - matrix(c(   provider_price[1] / consumer_income,   provider_price[2] / consumer_income ), 3)) #>           [,1]      [,2] #> [1,] 0.9314286 0.9571429 #> [2,] 0.8400000 0.9000000 #> [3,] 0.9040000 0.9400000  # then incorporate that with distance weights (access_monetary <- catchment_ratio(consumers, providers, weight = weight * monetary_cost)) #> [1] 0.2629032 0.3248161 0.4122807  ## compare with originals access_monetary - access #> [1]  0.012903226 -0.016093018  0.003189793"},{"path":[]},{"path":"/articles/introduction.html","id":"multiple-origins","dir":"Articles","previous_headings":"Expanding Weights > Consumer Flexibility","what":"Multiple Origins","title":"Introduction to Floating Catchment Areas","text":"far, considered consumers single location (live) travel providers. consumers regularly travel locations, however, might end closer provider incidentally. example, someone might visit doctor close work, even doctor far live. One way try account might simply calculate multiple ratios based different locations: reflect choice consumers now . example, consumers location 1 access providers 1 home, 50% also access providers 2 work, choose go either provider. Since providers distance 1 3 respectively (weight .9), best guess consumers’ decisions 50% . represent combine set weights, 50% consumers get 100% weight consumer location 1, 50% get 50% weight consumer location 1 50% consumer location 3, resulting 75% weight (.9 * .75) providers 1 25% weight (.9 * .25) providers 2. can consumers, calculate ratios way : , consumers 1 2 benefit general shift consumers toward provider 2, can also see weights: simplified, conceptually similar version commuter-based 2-step floating catchment area (CB2SFCA; Fransen et al., 2015).","code":"# say our consumer counts were spread across home and work locations (a consumer home x work matrix) (consumers_work <- matrix(c(5, 0, 2, 0, 8, 3, 5, 2, 5), 3)) #>      [,1] [,2] [,3] #> [1,]    5    0    5 #> [2,]    0    8    2 #> [3,]    2    3    5  # row sums would give the same (home-origin) scores as before rowSums(consumers_work) #> [1] 10 10 10 catchment_ratio(rowSums(consumers_work), providers, weight = weight) #> [1] 0.2500000 0.3409091 0.4090909  # and column sums would be the work-origin scores colSums(consumers_work) #> [1]  7 11 12 catchment_ratio(colSums(consumers_work), providers, weight = weight) #> [1] 0.2777778 0.3547009 0.3461538 # get the proportion of non-commuters (those with only home-origins) (nonworker_prop <- diag(consumers_work) / consumers) #> [1] 0.5 0.8 0.5  # then make a commuter-only matrix by replacing home-only consumers with # all who commute from that home location commuters <- consumers_work diag(commuters) <- 0 diag(commuters) <- rowSums(commuters)  # calculate proportional distribution of commuters (commuters <- commuters / rowSums(commuters)) #>      [,1] [,2] [,3] #> [1,]  0.5  0.0  0.5 #> [2,]  0.0  0.5  0.5 #> [3,]  0.2  0.3  0.5  # use this and proportional weights to calculate commuter weights (weight_commute <- commuters %*% weight_prop * rowSums(weight)) #>           [,1]      [,2] #> [1,] 0.4500000 0.4500000 #> [2,] 0.4500000 0.6500000 #> [3,] 0.4009091 0.4990909  # add these and non-commuter weights proportionally (weight_commute <- weight_commute * (1 - nonworker_prop) + weight * nonworker_prop) #>           [,1]      [,2] #> [1,] 0.6750000 0.2250000 #> [2,] 0.8100000 0.2900000 #> [3,] 0.2004545 0.6995455  # then calculate the new access score, incorporating work-origin weights (access_commute <- catchment_ratio(consumers, providers, weight = weight_commute)) #> [1] 0.2928700 0.3596775 0.3474525  ## you can also just enter the origin matrix in place of a consumers vector (catchment_ratio(consumers_work, providers, weight = weight)) #> [1] 0.2928700 0.3596775 0.3474525  ## compare with originals access_commute - access #> [1]  0.04286996  0.01876840 -0.06163836 # looking again at differences between scaled weights weight_commute / max(weight_commute) - weight / max(weight) #>            [,1]       [,2] #> [1,] -0.1666667  0.2777778 #> [2,]  0.0000000  0.1358025 #> [3,]  0.2474747 -0.1363636"},{"path":"/articles/introduction.html","id":"multiple-modes","dir":"Articles","previous_headings":"Expanding Weights > Consumer Flexibility","what":"Multiple Modes","title":"Introduction to Floating Catchment Areas","text":"also assuming consumes use mode travel, travel costs . can incorporate multiple modes travel similar way, time separate cost matrices. Say original cost matrix based travel time car, knew proportion consumer location access car, walk provider. can combined way incorporated multiple origins: , consumers 3 get slightly better access consumers 2 limited providers 1. similar multi-modal 2-step floating catchment area proposed Langford et al. (2016).","code":"# weight based on walking time (weight_walking <- matrix(c(1.5, 1.2, 0, 0, 0, 1.3), 3)) #>      [,1] [,2] #> [1,]  1.5  0.0 #> [2,]  1.2  0.0 #> [3,]  0.0  1.3  # proportion of each consumer location with access to a car consumers_car <- c(.8, .4, .7)  # proportionally combined weights (weight_multimode <- weight * consumers_car + weight_walking * (1 - consumers_car)) #>      [,1] [,2] #> [1,] 1.02 0.00 #> [2,] 1.08 0.08 #> [3,] 0.00 1.02  # mutli-modal score (access_multimode <- catchment_ratio(consumers, providers, weight = weight_multimode)) #> [1] 0.2428571 0.2935065 0.4636364  ## compare with original access_multimode - access #> [1] -0.007142857 -0.047402597  0.054545455"},{"path":"/articles/introduction.html","id":"imperfect-distribution","dir":"Articles","previous_headings":"","what":"Imperfect Distribution","title":"Introduction to Floating Catchment Areas","text":"far, perfectly distributing consumers across providers, indicated fact region scores always sum number providers. time relationship doesn’t hold methods ’ve reviewed far provider range consumers – say region scores always sum number providers range. One way see sort distribution optimal distribution providers, probably realistic (e.g., providers inconveniently located may perfectly utilized). try account Delamater (2013) proposed increasing provider-side weights, unbalance ratio, allowing providers left distribution. done simply squaring provider-side distance weights, resulting modified 2-step floating catchment area (M2SFCA). can adjust_providers argument: Naturally, almost always result lower access scores, particularly providers distant (case consumers 2).","code":"(access_modified <- catchment_ratio(   consumers, providers,   weight = weight,   adjust_providers = function(w) w^2 )) #> [1] 0.2250000 0.2431818 0.3681818  ## now not all providers are distributed sum(access_modified * consumers) #> [1] 8.363636  ## compare with original access_modified - access #> [1] -0.02500000 -0.09772727 -0.04090909"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Biocomplexity Institute. Author, copyright holder. Micah Iserman. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Biocomplexity Institute (2022). catchment: Calculate spatial access availability metrics. R package version 0.0.1.","code":"@Manual{,   title = {catchment: Calculate spatial access and availability metrics},   author = {{Biocomplexity Institute}},   year = {2022},   note = {R package version 0.0.1}, }"},{"path":"/index.html","id":"catchment","dir":"","previous_headings":"","what":"Calculate spatial access and availability metrics","title":"Calculate spatial access and availability metrics","text":"R package calculate spatial access availability metrics.  Catchments (catchment areas) regions defined effective range catching entity (result catching). example, basin might catch water, hospital patients, school students, store restaurant customers. entities might number conceptual catchments, externally defined (like school district), realized (origin actual customers), projected (travel-time radius). Introduction Floating Catchment Areas walks tractable examples. catchment_ratio main function, used define catchments travel-cost matrix bounds /decay function, calculate supply demand ratios within . generalized implementation range 2- 3-step floating catchment area models, generally meant align access Python package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate spatial access and availability metrics","text":"Download R r-project.org, install package R console: load package:","code":"# install.packages('remotes') remotes::install_github('uva-bi-sdad/catchment') library(catchment)"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 community authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/catchment-package.html","id":null,"dir":"Reference","previous_headings":"","what":"catchment: Calculate spatial access and availability metrics — catchment-package","title":"catchment: Calculate spatial access and availability metrics — catchment-package","text":"Offers range spatial access availability metrics, including variants 2- 3-step floating catchment areas: 2SFCA (Luo & Wang, 2003) <doi:10.1068/b29120>, E2SFCA (Lou & Qi, 2009) <doi:10.1016/j.healthplace.2009.06.002>, KD2SFCA / G2SFCA (Dai, 2010) <doi: 10.1016/j.healthplace.2010.06.012>, 3SFCA (Wan, Zou, & Sternberg, 2012) <doi:10.1080/13658816.2011.624987>.","code":""},{"path":"/reference/catchment-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"catchment: Calculate spatial access and availability metrics — catchment-package","text":"Maintainer: Micah Iserman micah.iserman@gmail.com Authors: Biocomplexity Institute [copyright holder]","code":""},{"path":"/reference/catchment_connections.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Connections Within Catchment Areas — catchment_connections","title":"Extract Connections Within Catchment Areas — catchment_connections","text":"Extract connected consumer () provider () locations within catchment area, defined cost weights.","code":""},{"path":"/reference/catchment_connections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Connections Within Catchment Areas — catchment_connections","text":"","code":"catchment_connections(from, to, cost = NULL, weight = 1, ...,   return_type = \"data.frame\", from_id = \"GEOID\", from_coords = c(\"X\",   \"Y\"), to_id = \"GEOID\", to_coords = c(\"X\", \"Y\"))"},{"path":"/reference/catchment_connections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Connections Within Catchment Areas — catchment_connections","text":"Consumer locations; matrix-like object columns containing latitudes longitudes (identified from_coords), column IDs corresponding rows cost (identified from_id). identifying column can alternatively contain associated matrix vector, IDs can row names. Provider locations;matrix-like object columns containing latitudes longitudes (identified to_coords), column IDs corresponding columns cost (identified to_id). identifying column can alternatively contain associated matrix vector, IDs can row names. cost cost matrix, row names corresponding IDs , column names corresponding IDs . weight weight matrix dimensions cost, returned catchment_weight. ... Passes arguments catchment_weight weight weight matrix. return_type Specify whether return data.frame (default) connection ids, weights, costs, sf data.frame (\"sf\") linestring geometries added connection, GeoJSON-formatted list (\"list\"). from_id, from_coords, to_id, to_coords Names ID coordinate columns , vectors IDs matrices coordinates.","code":""},{"path":"/reference/catchment_connections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Connections Within Catchment Areas — catchment_connections","text":"object connection, weight, cost information, format depending return_type.","code":""},{"path":"/reference/catchment_connections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Connections Within Catchment Areas — catchment_connections","text":"","code":"pop <- simulate_catchments() connections <- catchment_connections(   pop$consumers, pop$providers,   weight = \"gaussian\", max_cost = 1,   return_type = \"sf\" ) if (require(\"leaflet\", quiet = TRUE)) {   leaflet() |>     addPolylines(       data = connections, weight = 3, color = \"#777\",       highlightOptions = highlightOptions(color = \"#fff\", weight = 4),       label = ~ paste0(\"From: \", from, \", To: \", to, \", Weight: \", weight, \", Cost: \", cost)     ) |>     addCircles(       data = pop$consumers, label = ~ paste0(\"Consumers: \", count, \", Access: \", access)     ) |>     addCircles(       data = pop$providers, color = \"#000\", label = ~ paste(\"Provider\", id)     ) }  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addPolylines\",\"args\":[[[[{\"lng\":[-99.4031,-99.3936],\"lat\":[41.5005,41.2831]}]],[[{\"lng\":[-99.4031,-98.5496],\"lat\":[41.5005,41.8485]}]],[[{\"lng\":[-99.4031,-99.8403],\"lat\":[41.5005,41.4492]}]],[[{\"lng\":[-99.4365,-99.3936],\"lat\":[40.5575,41.2831]}]],[[{\"lng\":[-99.4365,-99.0999],\"lat\":[40.5575,40.1421]}]],[[{\"lng\":[-99.4365,-99.8403],\"lat\":[40.5575,41.4492]}]],[[{\"lng\":[-99.4246,-99.3662],\"lat\":[38.6233,38.8829]}]],[[{\"lng\":[-99.4246,-99.8565],\"lat\":[38.6233,39.4353]}]],[[{\"lng\":[-99.4246,-99.3491],\"lat\":[38.6233,38.3304]}]],[[{\"lng\":[-99.4246,-98.7714],\"lat\":[38.6233,38.1282]}]],[[{\"lng\":[-99.4246,-100.3226],\"lat\":[38.6233,38.317]}]],[[{\"lng\":[-97.7445,-97.9063],\"lat\":[39.3498,39.3798]}]],[[{\"lng\":[-97.7445,-97.6007],\"lat\":[39.3498,38.4734]}]],[[{\"lng\":[-99.9663,-99.3662],\"lat\":[38.4587,38.8829]}]],[[{\"lng\":[-99.9663,-99.8565],\"lat\":[38.4587,39.4353]}]],[[{\"lng\":[-99.9663,-99.3491],\"lat\":[38.4587,38.3304]}]],[[{\"lng\":[-99.9663,-100.3226],\"lat\":[38.4587,38.317]}]],[[{\"lng\":[-97.815,-97.9063],\"lat\":[38.8743,39.3798]}]],[[{\"lng\":[-97.815,-97.6007],\"lat\":[38.8743,38.4734]}]],[[{\"lng\":[-99.8096,-99.3936],\"lat\":[40.6308,41.2831]}]],[[{\"lng\":[-99.8096,-99.0999],\"lat\":[40.6308,40.1421]}]],[[{\"lng\":[-99.8096,-99.8403],\"lat\":[40.6308,41.4492]}]],[[{\"lng\":[-97.4403,-97.9063],\"lat\":[39.2713,39.3798]}]],[[{\"lng\":[-97.4403,-97.6007],\"lat\":[39.2713,38.4734]}]],[[{\"lng\":[-99.9959,-99.3662],\"lat\":[39.0475,38.8829]}]],[[{\"lng\":[-99.9959,-99.8565],\"lat\":[39.0475,39.4353]}]],[[{\"lng\":[-99.9959,-99.3491],\"lat\":[39.0475,38.3304]}]],[[{\"lng\":[-99.9959,-100.3894],\"lat\":[39.0475,39.6384]}]],[[{\"lng\":[-99.9959,-100.3226],\"lat\":[39.0475,38.317]}]],[[{\"lng\":[-97.5079,-97.6686],\"lat\":[40.685,40.4502]}]],[[{\"lng\":[-99.2641,-99.0999],\"lat\":[40.0811,40.1421]}]],[[{\"lng\":[-99.2641,-99.8565],\"lat\":[40.0811,39.4353]}]],[[{\"lng\":[-98.6633,-97.6686],\"lat\":[40.4344,40.4502]}]],[[{\"lng\":[-98.6633,-99.0999],\"lat\":[40.4344,40.1421]}]],[[{\"lng\":[-96.6841,-96.8204],\"lat\":[41.7707,41.4354]}]],[[{\"lng\":[-99.1155,-99.3662],\"lat\":[39.531,38.8829]}]],[[{\"lng\":[-99.1155,-99.0999],\"lat\":[39.531,40.1421]}]],[[{\"lng\":[-99.1155,-99.8565],\"lat\":[39.531,39.4353]}]],[[{\"lng\":[-99.3704,-99.3936],\"lat\":[42.1495,41.2831]}]],[[{\"lng\":[-99.3704,-98.5496],\"lat\":[42.1495,41.8485]}]],[[{\"lng\":[-99.3704,-99.8403],\"lat\":[42.1495,41.4492]}]],[[{\"lng\":[-98.7563,-99.3662],\"lat\":[39.5237,38.8829]}]],[[{\"lng\":[-98.7563,-97.9063],\"lat\":[39.5237,39.3798]}]],[[{\"lng\":[-98.7563,-99.0999],\"lat\":[39.5237,40.1421]}]],[[{\"lng\":[-98.155,-98.5496],\"lat\":[42.137,41.8485]}]],[[{\"lng\":[-98.0271,-97.9063],\"lat\":[39.4481,39.3798]}]],[[{\"lng\":[-99.5823,-99.3936],\"lat\":[41.187,41.2831]}]],[[{\"lng\":[-99.5823,-99.8403],\"lat\":[41.187,41.4492]}]],[[{\"lng\":[-99.3793,-99.3936],\"lat\":[40.4884,41.2831]}]],[[{\"lng\":[-99.3793,-99.0999],\"lat\":[40.4884,40.1421]}]],[[{\"lng\":[-98.5282,-97.9063],\"lat\":[39.8025,39.3798]}]],[[{\"lng\":[-98.5282,-99.0999],\"lat\":[39.8025,40.1421]}]],[[{\"lng\":[-97.7777,-97.9063],\"lat\":[39.2119,39.3798]}]],[[{\"lng\":[-97.7777,-97.6007],\"lat\":[39.2119,38.4734]}]],[[{\"lng\":[-100.0051,-99.3662],\"lat\":[38.9913,38.8829]}]],[[{\"lng\":[-100.0051,-99.8565],\"lat\":[38.9913,39.4353]}]],[[{\"lng\":[-100.0051,-99.3491],\"lat\":[38.9913,38.3304]}]],[[{\"lng\":[-100.0051,-100.3894],\"lat\":[38.9913,39.6384]}]],[[{\"lng\":[-100.0051,-100.3226],\"lat\":[38.9913,38.317]}]],[[{\"lng\":[-97.8214,-97.9063],\"lat\":[38.8939,39.3798]}]],[[{\"lng\":[-97.8214,-97.6007],\"lat\":[38.8939,38.4734]}]],[[{\"lng\":[-97.7064,-97.6686],\"lat\":[40.7201,40.4502]}]],[[{\"lng\":[-100.2274,-99.3662],\"lat\":[39.3615,38.8829]}]],[[{\"lng\":[-100.2274,-99.8565],\"lat\":[39.3615,39.4353]}]],[[{\"lng\":[-100.2274,-100.3894],\"lat\":[39.3615,39.6384]}]],[[{\"lng\":[-99.67,-99.3936],\"lat\":[40.8851,41.2831]}]],[[{\"lng\":[-99.67,-99.0999],\"lat\":[40.8851,40.1421]}]],[[{\"lng\":[-99.67,-99.8403],\"lat\":[40.8851,41.4492]}]],[[{\"lng\":[-100.1559,-99.8565],\"lat\":[39.5307,39.4353]}]],[[{\"lng\":[-100.1559,-100.3894],\"lat\":[39.5307,39.6384]}]],[[{\"lng\":[-99.5782,-99.3662],\"lat\":[39.6472,38.8829]}]],[[{\"lng\":[-99.5782,-99.0999],\"lat\":[39.6472,40.1421]}]],[[{\"lng\":[-99.5782,-99.8565],\"lat\":[39.6472,39.4353]}]],[[{\"lng\":[-99.5782,-100.3894],\"lat\":[39.6472,39.6384]}]],[[{\"lng\":[-97.6204,-97.9063],\"lat\":[39.8475,39.3798]}]],[[{\"lng\":[-97.6204,-97.6686],\"lat\":[39.8475,40.4502]}]],[[{\"lng\":[-99.706,-99.3936],\"lat\":[40.7791,41.2831]}]],[[{\"lng\":[-99.706,-99.0999],\"lat\":[40.7791,40.1421]}]],[[{\"lng\":[-99.706,-99.8403],\"lat\":[40.7791,41.4492]}]],[[{\"lng\":[-99.61,-99.3491],\"lat\":[37.8779,38.3304]}]],[[{\"lng\":[-99.61,-98.7714],\"lat\":[37.8779,38.1282]}]],[[{\"lng\":[-99.61,-100.3226],\"lat\":[37.8779,38.317]}]],[[{\"lng\":[-98.7879,-99.3936],\"lat\":[40.5885,41.2831]}]],[[{\"lng\":[-98.7879,-99.0999],\"lat\":[40.5885,40.1421]}]],[[{\"lng\":[-96.8359,-97.6686],\"lat\":[39.9827,40.4502]}]],[[{\"lng\":[-100.9523,-100.3894],\"lat\":[39.881,39.6384]}]],[[{\"lng\":[-100.3391,-100.3894],\"lat\":[40.3724,39.6384]}]],[[{\"lng\":[-99.045,-99.0999],\"lat\":[40.1221,40.1421]}]],[[{\"lng\":[-98.3508,-97.9063],\"lat\":[40.2274,39.3798]}]],[[{\"lng\":[-98.3508,-97.6686],\"lat\":[40.2274,40.4502]}]],[[{\"lng\":[-98.3508,-99.0999],\"lat\":[40.2274,40.1421]}]],[[{\"lng\":[-98.5353,-97.6686],\"lat\":[40.1592,40.4502]}]],[[{\"lng\":[-98.5353,-99.0999],\"lat\":[40.1592,40.1421]}]],[[{\"lng\":[-98.9649,-99.0999],\"lat\":[39.827,40.1421]}]],[[{\"lng\":[-98.9649,-99.8565],\"lat\":[39.827,39.4353]}]],[[{\"lng\":[-97.7356,-97.9063],\"lat\":[40.0611,39.3798]}]],[[{\"lng\":[-97.7356,-97.6686],\"lat\":[40.0611,40.4502]}]],[[{\"lng\":[-99.8776,-99.0999],\"lat\":[39.7749,40.1421]}]],[[{\"lng\":[-99.8776,-99.8565],\"lat\":[39.7749,39.4353]}]],[[{\"lng\":[-99.8776,-100.3894],\"lat\":[39.7749,39.6384]}]],[[{\"lng\":[-98.7579,-99.3662],\"lat\":[39.1563,38.8829]}]],[[{\"lng\":[-98.7579,-97.9063],\"lat\":[39.1563,39.3798]}]],[[{\"lng\":[-98.2895,-98.7714],\"lat\":[37.9585,38.1282]}]],[[{\"lng\":[-98.2895,-97.6007],\"lat\":[37.9585,38.4734]}]],[[{\"lng\":[-99.1138,-99.3936],\"lat\":[41.3073,41.2831]}]],[[{\"lng\":[-99.1138,-98.5496],\"lat\":[41.3073,41.8485]}]],[[{\"lng\":[-99.1138,-99.8403],\"lat\":[41.3073,41.4492]}]],[[{\"lng\":[-98.8766,-99.0999],\"lat\":[40.4108,40.1421]}]],[[{\"lng\":[-99.959,-99.3936],\"lat\":[41.0071,41.2831]}]],[[{\"lng\":[-99.959,-99.8403],\"lat\":[41.0071,41.4492]}]],[[{\"lng\":[-98.8125,-99.0999],\"lat\":[39.8451,40.1421]}]],[[{\"lng\":[-99.8843,-99.3662],\"lat\":[39.1819,38.8829]}]],[[{\"lng\":[-99.8843,-99.8565],\"lat\":[39.1819,39.4353]}]],[[{\"lng\":[-99.8843,-100.3894],\"lat\":[39.1819,39.6384]}]],[[{\"lng\":[-99.8843,-100.3226],\"lat\":[39.1819,38.317]}]],[[{\"lng\":[-99.0781,-99.0999],\"lat\":[40.1867,40.1421]}]],[[{\"lng\":[-98.983,-99.3936],\"lat\":[41.98,41.2831]}]],[[{\"lng\":[-98.983,-98.5496],\"lat\":[41.98,41.8485]}]],[[{\"lng\":[-97.4378,-97.9063],\"lat\":[39.8227,39.3798]}]],[[{\"lng\":[-97.4378,-97.6686],\"lat\":[39.8227,40.4502]}]],[[{\"lng\":[-99.5749,-99.3662],\"lat\":[39.0945,38.8829]}]],[[{\"lng\":[-99.5749,-99.8565],\"lat\":[39.0945,39.4353]}]],[[{\"lng\":[-99.5749,-99.3491],\"lat\":[39.0945,38.3304]}]],[[{\"lng\":[-99.5749,-100.3894],\"lat\":[39.0945,39.6384]}]],[[{\"lng\":[-102.1208,-102.0485],\"lat\":[40.822,40.9328]}]],[[{\"lng\":[-99.1842,-99.3662],\"lat\":[39.3499,38.8829]}]],[[{\"lng\":[-99.1842,-99.0999],\"lat\":[39.3499,40.1421]}]],[[{\"lng\":[-99.1842,-99.8565],\"lat\":[39.3499,39.4353]}]],[[{\"lng\":[-97.9951,-97.6686],\"lat\":[40.44,40.4502]}]],[[{\"lng\":[-98.2157,-97.9063],\"lat\":[39.432,39.3798]}]],[[{\"lng\":[-97.2019,-97.6007],\"lat\":[38.042,38.4734]}]],[[{\"lng\":[-100.4488,-99.8565],\"lat\":[39.4198,39.4353]}]],[[{\"lng\":[-100.4488,-100.3894],\"lat\":[39.4198,39.6384]}]],[[{\"lng\":[-98.9293,-99.3936],\"lat\":[41.6004,41.2831]}]],[[{\"lng\":[-98.9293,-98.5496],\"lat\":[41.6004,41.8485]}]],[[{\"lng\":[-98.9293,-99.8403],\"lat\":[41.6004,41.4492]}]],[[{\"lng\":[-99.5237,-99.3936],\"lat\":[42.0137,41.2831]}]],[[{\"lng\":[-99.5237,-98.5496],\"lat\":[42.0137,41.8485]}]],[[{\"lng\":[-99.5237,-99.8403],\"lat\":[42.0137,41.4492]}]],[[{\"lng\":[-99.0058,-99.0999],\"lat\":[40.2788,40.1421]}]],[[{\"lng\":[-99.2407,-99.3662],\"lat\":[39.5796,38.8829]}]],[[{\"lng\":[-99.2407,-99.0999],\"lat\":[39.5796,40.1421]}]],[[{\"lng\":[-99.2407,-99.8565],\"lat\":[39.5796,39.4353]}]],[[{\"lng\":[-98.6769,-99.3936],\"lat\":[40.8529,41.2831]}]],[[{\"lng\":[-98.6769,-99.0999],\"lat\":[40.8529,40.1421]}]],[[{\"lng\":[-99.246,-99.3936],\"lat\":[40.4011,41.2831]}]],[[{\"lng\":[-99.246,-99.0999],\"lat\":[40.4011,40.1421]}]],[[{\"lng\":[-97.9378,-97.9063],\"lat\":[39.0153,39.3798]}]],[[{\"lng\":[-97.9378,-97.6007],\"lat\":[39.0153,38.4734]}]],[[{\"lng\":[-98.9284,-99.3491],\"lat\":[37.8108,38.3304]}]],[[{\"lng\":[-98.9284,-98.7714],\"lat\":[37.8108,38.1282]}]],[[{\"lng\":[-98.0812,-97.6686],\"lat\":[40.8599,40.4502]}]],[[{\"lng\":[-97.9375,-97.6686],\"lat\":[40.4796,40.4502]}]],[[{\"lng\":[-100.3799,-99.8403],\"lat\":[41.6583,41.4492]}]],[[{\"lng\":[-99.541,-99.3936],\"lat\":[40.6308,41.2831]}]],[[{\"lng\":[-99.541,-99.0999],\"lat\":[40.6308,40.1421]}]],[[{\"lng\":[-99.541,-99.8403],\"lat\":[40.6308,41.4492]}]],[[{\"lng\":[-99.8454,-99.3662],\"lat\":[39.1953,38.8829]}]],[[{\"lng\":[-99.8454,-99.8565],\"lat\":[39.1953,39.4353]}]],[[{\"lng\":[-99.8454,-99.3491],\"lat\":[39.1953,38.3304]}]],[[{\"lng\":[-99.8454,-100.3894],\"lat\":[39.1953,39.6384]}]],[[{\"lng\":[-99.8454,-100.3226],\"lat\":[39.1953,38.317]}]],[[{\"lng\":[-99.2755,-99.3662],\"lat\":[39.3622,38.8829]}]],[[{\"lng\":[-99.2755,-99.0999],\"lat\":[39.3622,40.1421]}]],[[{\"lng\":[-99.2755,-99.8565],\"lat\":[39.3622,39.4353]}]],[[{\"lng\":[-100.8149,-100.3226],\"lat\":[38.3639,38.317]}]],[[{\"lng\":[-98.7723,-99.3662],\"lat\":[39.454,38.8829]}]],[[{\"lng\":[-98.7723,-97.9063],\"lat\":[39.454,39.3798]}]],[[{\"lng\":[-98.7723,-99.0999],\"lat\":[39.454,40.1421]}]],[[{\"lng\":[-98.4067,-98.5496],\"lat\":[41.6641,41.8485]}]],[[{\"lng\":[-98.3441,-97.6686],\"lat\":[40.3357,40.4502]}]],[[{\"lng\":[-98.3441,-99.0999],\"lat\":[40.3357,40.1421]}]],[[{\"lng\":[-97.0735,-97.6686],\"lat\":[40.9409,40.4502]}]],[[{\"lng\":[-97.0735,-96.8204],\"lat\":[40.9409,41.4354]}]],[[{\"lng\":[-98.6213,-99.3662],\"lat\":[39.3445,38.8829]}]],[[{\"lng\":[-98.6213,-97.9063],\"lat\":[39.3445,39.3798]}]],[[{\"lng\":[-98.6213,-99.0999],\"lat\":[39.3445,40.1421]}]],[[{\"lng\":[-97.3242,-97.6686],\"lat\":[40.5678,40.4502]}]],[[{\"lng\":[-98.9581,-99.0999],\"lat\":[39.992,40.1421]}]],[[{\"lng\":[-97.8509,-98.5496],\"lat\":[41.5608,41.8485]}]],[[{\"lng\":[-97.9999,-97.9063],\"lat\":[40.3298,39.3798]}]],[[{\"lng\":[-97.9999,-97.6686],\"lat\":[40.3298,40.4502]}]],[[{\"lng\":[-98.7932,-99.0999],\"lat\":[40.4831,40.1421]}]],[[{\"lng\":[-99.0434,-99.3936],\"lat\":[40.8406,41.2831]}]],[[{\"lng\":[-99.0434,-99.0999],\"lat\":[40.8406,40.1421]}]],[[{\"lng\":[-97.5604,-97.6686],\"lat\":[40.4362,40.4502]}]],[[{\"lng\":[-98.9821,-99.3936],\"lat\":[42.1332,41.2831]}]],[[{\"lng\":[-98.9821,-98.5496],\"lat\":[42.1332,41.8485]}]],[[{\"lng\":[-99.2685,-99.3936],\"lat\":[41.2634,41.2831]}]],[[{\"lng\":[-99.2685,-98.5496],\"lat\":[41.2634,41.8485]}]],[[{\"lng\":[-99.2685,-99.8403],\"lat\":[41.2634,41.4492]}]],[[{\"lng\":[-99.3703,-99.3662],\"lat\":[39.7331,38.8829]}]],[[{\"lng\":[-99.3703,-99.0999],\"lat\":[39.7331,40.1421]}]],[[{\"lng\":[-99.3703,-99.8565],\"lat\":[39.7331,39.4353]}]],[[{\"lng\":[-97.2181,-97.9063],\"lat\":[39.5188,39.3798]}]],[[{\"lng\":[-100.0383,-99.3662],\"lat\":[39.4303,38.8829]}]],[[{\"lng\":[-100.0383,-99.8565],\"lat\":[39.4303,39.4353]}]],[[{\"lng\":[-100.0383,-100.3894],\"lat\":[39.4303,39.6384]}]],[[{\"lng\":[-99.7392,-99.3662],\"lat\":[38.6951,38.8829]}]],[[{\"lng\":[-99.7392,-99.8565],\"lat\":[38.6951,39.4353]}]],[[{\"lng\":[-99.7392,-99.3491],\"lat\":[38.6951,38.3304]}]],[[{\"lng\":[-99.7392,-100.3226],\"lat\":[38.6951,38.317]}]],[[{\"lng\":[-98.5876,-99.3662],\"lat\":[38.8661,38.8829]}]],[[{\"lng\":[-98.5876,-97.9063],\"lat\":[38.8661,39.3798]}]],[[{\"lng\":[-98.5876,-99.3491],\"lat\":[38.8661,38.3304]}]],[[{\"lng\":[-98.5876,-98.7714],\"lat\":[38.8661,38.1282]}]],[[{\"lng\":[-99.0361,-99.3662],\"lat\":[39.4793,38.8829]}]],[[{\"lng\":[-99.0361,-99.0999],\"lat\":[39.4793,40.1421]}]],[[{\"lng\":[-99.0361,-99.8565],\"lat\":[39.4793,39.4353]}]],[[{\"lng\":[-99.9341,-99.3936],\"lat\":[40.5436,41.2831]}]],[[{\"lng\":[-99.9341,-99.0999],\"lat\":[40.5436,40.1421]}]],[[{\"lng\":[-99.9341,-99.8403],\"lat\":[40.5436,41.4492]}]],[[{\"lng\":[-99.0327,-99.3662],\"lat\":[38.1467,38.8829]}]],[[{\"lng\":[-99.0327,-99.3491],\"lat\":[38.1467,38.3304]}]],[[{\"lng\":[-99.0327,-98.7714],\"lat\":[38.1467,38.1282]}]],[[{\"lng\":[-97.7451,-97.9063],\"lat\":[38.8392,39.3798]}]],[[{\"lng\":[-97.7451,-97.6007],\"lat\":[38.8392,38.4734]}]],[[{\"lng\":[-99.0921,-99.3662],\"lat\":[38.0671,38.8829]}]],[[{\"lng\":[-99.0921,-99.3491],\"lat\":[38.0671,38.3304]}]],[[{\"lng\":[-99.0921,-98.7714],\"lat\":[38.0671,38.1282]}]],[[{\"lng\":[-99.457,-99.3936],\"lat\":[40.7407,41.2831]}]],[[{\"lng\":[-99.457,-99.0999],\"lat\":[40.7407,40.1421]}]],[[{\"lng\":[-99.457,-99.8403],\"lat\":[40.7407,41.4492]}]],[[{\"lng\":[-99.3875,-99.3662],\"lat\":[38.4567,38.8829]}]],[[{\"lng\":[-99.3875,-99.3491],\"lat\":[38.4567,38.3304]}]],[[{\"lng\":[-99.3875,-98.7714],\"lat\":[38.4567,38.1282]}]],[[{\"lng\":[-99.3875,-100.3226],\"lat\":[38.4567,38.317]}]]],null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#777\",\"weight\":3,\"opacity\":0.5,\"fill\":false,\"fillColor\":\"#777\",\"fillOpacity\":0.2,\"smoothFactor\":1,\"noClip\":false},null,null,[\"From: 1, To: 2, Weight: 0.9941, Cost: 0.2177\",\"From: 1, To: 8, Weight: 0.8993, Cost: 0.9217\",\"From: 1, To: 14, Weight: 0.9761, Cost: 0.4402\",\"From: 2, To: 2, Weight: 0.9361, Cost: 0.7268\",\"From: 2, To: 6, Weight: 0.9649, Cost: 0.5347\",\"From: 2, To: 14, Weight: 0.8871, Cost: 0.9789\",\"From: 3, To: 3, Weight: 0.9912, Cost: 0.2661\",\"From: 3, To: 9, Weight: 0.8997, Cost: 0.9198\",\"From: 3, To: 10, Weight: 0.9886, Cost: 0.3024\",\"From: 3, To: 12, Weight: 0.9195, Cost: 0.8197\",\"From: 3, To: 15, Weight: 0.8936, Cost: 0.9488\",\"From: 4, To: 4, Weight: 0.9966, Cost: 0.1646\",\"From: 4, To: 13, Weight: 0.9061, Cost: 0.8881\",\"From: 5, To: 3, Weight: 0.9347, Cost: 0.7349\",\"From: 5, To: 9, Weight: 0.8863, Cost: 0.9828\",\"From: 5, To: 10, Weight: 0.9515, Cost: 0.6304\",\"From: 5, To: 15, Weight: 0.9818, Cost: 0.3834\",\"From: 6, To: 4, Weight: 0.9676, Cost: 0.5137\",\"From: 6, To: 13, Weight: 0.9745, Cost: 0.4546\",\"From: 7, To: 2, Weight: 0.9279, Cost: 0.7737\",\"From: 7, To: 6, Weight: 0.9114, Cost: 0.8617\",\"From: 7, To: 14, Weight: 0.9196, Cost: 0.8191\",\"From: 8, To: 4, Weight: 0.9718, Cost: 0.4785\",\"From: 8, To: 13, Weight: 0.9206, Cost: 0.8138\",\"From: 9, To: 3, Weight: 0.9484, Cost: 0.6509\",\"From: 9, To: 9, Weight: 0.979, Cost: 0.4122\",\"From: 9, To: 10, Weight: 0.89, Cost: 0.9656\",\"From: 9, To: 11, Weight: 0.9389, Cost: 0.7099\",\"From: 9, To: 15, Weight: 0.9231, Cost: 0.8002\",\"From: 10, To: 5, Weight: 0.9899, Cost: 0.2845\",\"From: 11, To: 6, Weight: 0.9962, Cost: 0.1751\",\"From: 11, To: 9, Weight: 0.9085, Cost: 0.8763\",\"From: 12, To: 5, Weight: 0.8837, Cost: 0.9947\",\"From: 12, To: 6, Weight: 0.9661, Cost: 0.5255\",\"From: 13, To: 7, Weight: 0.9838, Cost: 0.362\",\"From: 14, To: 3, Weight: 0.9414, Cost: 0.6949\",\"From: 14, To: 6, Weight: 0.9544, Cost: 0.6113\",\"From: 14, To: 9, Weight: 0.9326, Cost: 0.7471\",\"From: 15, To: 2, Weight: 0.9104, Cost: 0.8667\",\"From: 15, To: 8, Weight: 0.9089, Cost: 0.8743\",\"From: 15, To: 14, Weight: 0.9149, Cost: 0.8433\",\"From: 16, To: 3, Weight: 0.9068, Cost: 0.8846\",\"From: 16, To: 4, Weight: 0.9113, Cost: 0.8621\",\"From: 16, To: 6, Weight: 0.9394, Cost: 0.7075\",\"From: 17, To: 8, Weight: 0.9706, Cost: 0.4889\",\"From: 18, To: 4, Weight: 0.9976, Cost: 0.1388\",\"From: 19, To: 2, Weight: 0.9944, Cost: 0.2117\",\"From: 19, To: 14, Weight: 0.9832, Cost: 0.3679\",\"From: 20, To: 2, Weight: 0.9241, Cost: 0.7948\",\"From: 20, To: 6, Weight: 0.9756, Cost: 0.4449\",\"From: 21, To: 4, Weight: 0.9318, Cost: 0.7519\",\"From: 21, To: 6, Weight: 0.9462, Cost: 0.665\",\"From: 22, To: 4, Weight: 0.9944, Cost: 0.2115\",\"From: 22, To: 13, Weight: 0.9305, Cost: 0.7593\",\"From: 23, To: 3, Weight: 0.9489, Cost: 0.648\",\"From: 23, To: 9, Weight: 0.973, Cost: 0.4683\",\"From: 23, To: 10, Weight: 0.8973, Cost: 0.9311\",\"From: 23, To: 11, Weight: 0.9316, Cost: 0.7526\",\"From: 23, To: 15, Weight: 0.9329, Cost: 0.7453\",\"From: 24, To: 4, Weight: 0.97, Cost: 0.4932\",\"From: 24, To: 13, Weight: 0.9722, Cost: 0.4749\",\"From: 25, To: 5, Weight: 0.9908, Cost: 0.2726\",\"From: 26, To: 3, Weight: 0.8857, Cost: 0.9852\",\"From: 26, To: 9, Weight: 0.9823, Cost: 0.3782\",\"From: 26, To: 11, Weight: 0.9872, Cost: 0.3208\",\"From: 27, To: 2, Weight: 0.9711, Cost: 0.4845\",\"From: 27, To: 6, Weight: 0.8962, Cost: 0.9366\",\"From: 27, To: 14, Weight: 0.9575, Cost: 0.5892\",\"From: 28, To: 9, Weight: 0.9877, Cost: 0.3142\",\"From: 28, To: 11, Weight: 0.9918, Cost: 0.2571\",\"From: 29, To: 3, Weight: 0.9244, Cost: 0.7932\",\"From: 29, To: 6, Weight: 0.9425, Cost: 0.6882\",\"From: 29, To: 9, Weight: 0.9848, Cost: 0.3498\",\"From: 29, To: 11, Weight: 0.921, Cost: 0.8112\",\"From: 30, To: 4, Weight: 0.9631, Cost: 0.5482\",\"From: 30, To: 5, Weight: 0.9553, Cost: 0.6046\",\"From: 31, To: 2, Weight: 0.957, Cost: 0.5929\",\"From: 31, To: 6, Weight: 0.9079, Cost: 0.8793\",\"From: 31, To: 14, Weight: 0.9433, Cost: 0.6834\",\"From: 32, To: 10, Weight: 0.9665, Cost: 0.5223\",\"From: 32, To: 12, Weight: 0.9087, Cost: 0.8751\",\"From: 32, To: 15, Weight: 0.9161, Cost: 0.8371\",\"From: 33, To: 2, Weight: 0.8993, Cost: 0.9216\",\"From: 33, To: 6, Weight: 0.9636, Cost: 0.5447\",\"From: 34, To: 5, Weight: 0.8923, Cost: 0.955\",\"From: 35, To: 11, Weight: 0.9541, Cost: 0.6129\",\"From: 36, To: 11, Weight: 0.9346, Cost: 0.7358\",\"From: 37, To: 6, Weight: 0.9996, Cost: 0.0585\",\"From: 38, To: 4, Weight: 0.8918, Cost: 0.9571\",\"From: 38, To: 5, Weight: 0.9376, Cost: 0.7177\",\"From: 38, To: 6, Weight: 0.9314, Cost: 0.7539\",\"From: 39, To: 5, Weight: 0.9008, Cost: 0.9142\",\"From: 39, To: 6, Weight: 0.9609, Cost: 0.5649\",\"From: 40, To: 6, Weight: 0.9854, Cost: 0.3428\",\"From: 40, To: 9, Weight: 0.8882, Cost: 0.9738\",\"From: 41, To: 4, Weight: 0.9402, Cost: 0.7023\",\"From: 41, To: 5, Weight: 0.9807, Cost: 0.3948\",\"From: 42, To: 6, Weight: 0.9117, Cost: 0.86\",\"From: 42, To: 9, Weight: 0.9856, Cost: 0.3403\",\"From: 42, To: 11, Weight: 0.9655, Cost: 0.5297\",\"From: 43, To: 3, Weight: 0.9459, Cost: 0.6669\",\"From: 43, To: 4, Weight: 0.9076, Cost: 0.8805\",\"From: 44, To: 12, Weight: 0.9679, Cost: 0.5109\",\"From: 44, To: 13, Weight: 0.9117, Cost: 0.86\",\"From: 45, To: 2, Weight: 0.9902, Cost: 0.2808\",\"From: 45, To: 8, Weight: 0.9265, Cost: 0.7817\",\"From: 45, To: 14, Weight: 0.9338, Cost: 0.7403\",\"From: 46, To: 6, Weight: 0.9849, Cost: 0.3494\",\"From: 47, To: 2, Weight: 0.9517, Cost: 0.6292\",\"From: 47, To: 14, Weight: 0.9741, Cost: 0.4578\",\"From: 48, To: 6, Weight: 0.9789, Cost: 0.4133\",\"From: 49, To: 3, Weight: 0.9563, Cost: 0.5982\",\"From: 49, To: 9, Weight: 0.9919, Cost: 0.2549\",\"From: 49, To: 11, Weight: 0.9437, Cost: 0.6808\",\"From: 49, To: 15, Weight: 0.8891, Cost: 0.9696\",\"From: 50, To: 6, Weight: 0.9997, Cost: 0.0497\",\"From: 51, To: 2, Weight: 0.9215, Cost: 0.8089\",\"From: 51, To: 8, Weight: 0.9747, Cost: 0.4529\",\"From: 52, To: 4, Weight: 0.9494, Cost: 0.6447\",\"From: 52, To: 5, Weight: 0.9457, Cost: 0.6686\",\"From: 53, To: 3, Weight: 0.989, Cost: 0.2972\",\"From: 53, To: 9, Weight: 0.9759, Cost: 0.4421\",\"From: 53, To: 10, Weight: 0.9237, Cost: 0.7967\",\"From: 53, To: 11, Weight: 0.887, Cost: 0.9794\",\"From: 54, To: 1, Weight: 0.9978, Cost: 0.1324\",\"From: 55, To: 3, Weight: 0.9691, Cost: 0.5013\",\"From: 55, To: 6, Weight: 0.9237, Cost: 0.7966\",\"From: 55, To: 9, Weight: 0.9442, Cost: 0.6777\",\"From: 56, To: 5, Weight: 0.9868, Cost: 0.3266\",\"From: 57, To: 4, Weight: 0.9878, Cost: 0.3138\",\"From: 58, To: 13, Weight: 0.9578, Cost: 0.5875\",\"From: 59, To: 9, Weight: 0.9571, Cost: 0.5925\",\"From: 59, To: 11, Weight: 0.9936, Cost: 0.2265\",\"From: 60, To: 2, Weight: 0.9612, Cost: 0.5623\",\"From: 60, To: 8, Weight: 0.9746, Cost: 0.4535\",\"From: 60, To: 14, Weight: 0.8989, Cost: 0.9234\",\"From: 61, To: 2, Weight: 0.9335, Cost: 0.7421\",\"From: 61, To: 8, Weight: 0.8851, Cost: 0.988\",\"From: 61, To: 14, Weight: 0.949, Cost: 0.6472\",\"From: 62, To: 6, Weight: 0.9966, Cost: 0.166\",\"From: 63, To: 3, Weight: 0.9393, Cost: 0.7079\",\"From: 63, To: 6, Weight: 0.9588, Cost: 0.5798\",\"From: 63, To: 9, Weight: 0.9512, Cost: 0.6325\",\"From: 64, To: 2, Weight: 0.9164, Cost: 0.8358\",\"From: 64, To: 6, Weight: 0.918, Cost: 0.8272\",\"From: 65, To: 2, Weight: 0.9049, Cost: 0.8943\",\"From: 65, To: 6, Weight: 0.989, Cost: 0.2973\",\"From: 66, To: 4, Weight: 0.9834, Cost: 0.3658\",\"From: 66, To: 13, Weight: 0.9504, Cost: 0.6382\",\"From: 67, To: 10, Weight: 0.9457, Cost: 0.6685\",\"From: 67, To: 12, Weight: 0.9845, Cost: 0.3541\",\"From: 68, To: 5, Weight: 0.9586, Cost: 0.5814\",\"From: 69, To: 5, Weight: 0.9909, Cost: 0.2705\",\"From: 70, To: 14, Weight: 0.959, Cost: 0.5787\",\"From: 71, To: 2, Weight: 0.9456, Cost: 0.6687\",\"From: 71, To: 6, Weight: 0.9473, Cost: 0.6584\",\"From: 71, To: 14, Weight: 0.9094, Cost: 0.8714\",\"From: 72, To: 3, Weight: 0.9599, Cost: 0.572\",\"From: 72, To: 9, Weight: 0.9928, Cost: 0.2403\",\"From: 72, To: 10, Weight: 0.8831, Cost: 0.9971\",\"From: 72, To: 11, Weight: 0.9403, Cost: 0.7016\",\"From: 72, To: 15, Weight: 0.8826, Cost: 0.9996\",\"From: 73, To: 3, Weight: 0.9707, Cost: 0.4878\",\"From: 73, To: 6, Weight: 0.9232, Cost: 0.7994\",\"From: 73, To: 9, Weight: 0.958, Cost: 0.5856\",\"From: 74, To: 15, Weight: 0.9699, Cost: 0.4945\",\"From: 75, To: 3, Weight: 0.9186, Cost: 0.824\",\"From: 75, To: 4, Weight: 0.9099, Cost: 0.8691\",\"From: 75, To: 6, Weight: 0.93, Cost: 0.7621\",\"From: 76, To: 8, Weight: 0.9932, Cost: 0.2332\",\"From: 77, To: 5, Weight: 0.943, Cost: 0.6851\",\"From: 77, To: 6, Weight: 0.9267, Cost: 0.7802\",\"From: 78, To: 5, Weight: 0.9283, Cost: 0.7713\",\"From: 78, To: 7, Weight: 0.9622, Cost: 0.5556\",\"From: 79, To: 3, Weight: 0.9085, Cost: 0.8764\",\"From: 79, To: 4, Weight: 0.938, Cost: 0.7158\",\"From: 79, To: 6, Weight: 0.8975, Cost: 0.9301\",\"From: 80, To: 5, Weight: 0.9836, Cost: 0.364\",\"From: 81, To: 6, Weight: 0.9947, Cost: 0.2065\",\"From: 82, To: 8, Weight: 0.9311, Cost: 0.7556\",\"From: 83, To: 4, Weight: 0.8923, Cost: 0.9546\",\"From: 83, To: 5, Weight: 0.9846, Cost: 0.3525\",\"From: 84, To: 6, Weight: 0.974, Cost: 0.4587\",\"From: 85, To: 2, Weight: 0.961, Cost: 0.5643\",\"From: 85, To: 6, Weight: 0.9405, Cost: 0.7008\",\"From: 86, To: 5, Weight: 0.9985, Cost: 0.1091\",\"From: 87, To: 2, Weight: 0.8945, Cost: 0.9445\",\"From: 87, To: 8, Weight: 0.967, Cost: 0.5178\",\"From: 88, To: 2, Weight: 0.998, Cost: 0.1266\",\"From: 88, To: 8, Weight: 0.8982, Cost: 0.9268\",\"From: 88, To: 14, Weight: 0.9558, Cost: 0.6013\",\"From: 89, To: 3, Weight: 0.9136, Cost: 0.8503\",\"From: 89, To: 6, Weight: 0.9704, Cost: 0.4903\",\"From: 89, To: 9, Weight: 0.9602, Cost: 0.5701\",\"From: 90, To: 4, Weight: 0.9402, Cost: 0.7021\",\"From: 91, To: 3, Weight: 0.9103, Cost: 0.8669\",\"From: 91, To: 9, Weight: 0.9959, Cost: 0.1819\",\"From: 91, To: 11, Weight: 0.9794, Cost: 0.4081\",\"From: 92, To: 3, Weight: 0.9784, Cost: 0.4176\",\"From: 92, To: 9, Weight: 0.9322, Cost: 0.7495\",\"From: 92, To: 10, Weight: 0.965, Cost: 0.534\",\"From: 92, To: 15, Weight: 0.9414, Cost: 0.6952\",\"From: 93, To: 3, Weight: 0.927, Cost: 0.7788\",\"From: 93, To: 4, Weight: 0.913, Cost: 0.8532\",\"From: 93, To: 10, Weight: 0.8973, Cost: 0.9311\",\"From: 93, To: 12, Weight: 0.9303, Cost: 0.7605\",\"From: 94, To: 3, Weight: 0.9436, Cost: 0.6817\",\"From: 94, To: 6, Weight: 0.9461, Cost: 0.6659\",\"From: 94, To: 9, Weight: 0.9191, Cost: 0.8216\",\"From: 95, To: 2, Weight: 0.9004, Cost: 0.9159\",\"From: 95, To: 6, Weight: 0.8984, Cost: 0.9258\",\"From: 95, To: 14, Weight: 0.9016, Cost: 0.9104\",\"From: 96, To: 3, Weight: 0.9216, Cost: 0.8082\",\"From: 96, To: 10, Weight: 0.9834, Cost: 0.3659\",\"From: 96, To: 12, Weight: 0.9915, Cost: 0.262\",\"From: 97, To: 4, Weight: 0.961, Cost: 0.5641\",\"From: 97, To: 13, Weight: 0.9809, Cost: 0.3933\",\"From: 98, To: 3, Weight: 0.9116, Cost: 0.8606\",\"From: 98, To: 10, Weight: 0.9832, Cost: 0.368\",\"From: 98, To: 12, Weight: 0.9868, Cost: 0.3265\",\"From: 99, To: 2, Weight: 0.9634, Cost: 0.546\",\"From: 99, To: 6, Weight: 0.9411, Cost: 0.6971\",\"From: 99, To: 14, Weight: 0.9221, Cost: 0.8056\",\"From: 100, To: 3, Weight: 0.9775, Cost: 0.4267\",\"From: 100, To: 10, Weight: 0.9978, Cost: 0.132\",\"From: 100, To: 12, Weight: 0.9409, Cost: 0.6983\",\"From: 100, To: 15, Weight: 0.8943, Cost: 0.9455\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},{\"color\":\"#fff\",\"weight\":4}]},{\"method\":\"addCircles\",\"args\":[[41.5005113929789,40.5574883724188,38.6232710865548,39.3498295148837,38.4586579906411,38.8743005010119,40.630751929011,39.271269875097,39.0474526120193,40.6849624960718,40.0811073093526,40.4343535755013,41.77069703079,39.5309819128182,42.1494730575995,39.523656134295,42.1369824331904,39.4481027743126,41.1870456223689,40.4883684416913,39.8025032377038,39.2118552883082,38.9912615979578,38.8939083671674,40.7201110805003,39.3615246628005,40.8851477337566,39.5307169419096,39.6472202599597,39.8474880845087,40.7791296593886,37.8779057460496,40.5884905151033,39.9826993239987,39.8810004419267,40.372425516288,40.1221071381207,40.2273949530748,40.1592484996464,39.8270021812623,40.0610800343715,39.7749432396181,39.1563269563631,37.9585363238974,41.3073174281675,40.4107772419768,41.0070704386366,39.8450777678609,39.1819155337833,40.1867469410065,41.9800370681568,39.8226696629013,39.094495062008,40.821987572461,39.3499427835472,40.4399954374124,39.4320310699712,38.0420024858922,39.4197886023251,41.6004009210161,42.0137016675398,40.2788011391758,39.5795758655143,40.8528818868758,40.401059294142,39.015347896612,37.8108442614806,40.8598619998541,40.4796496994104,41.6583432539463,40.6308269198354,39.1953017139745,39.3621712764334,38.3639319955633,39.4539884192915,41.6641380750214,40.3356659589962,40.9408520883134,39.3445351218895,40.5678267391611,39.9919574869505,41.5608037004324,40.3298315921815,40.4830932780299,40.8405884002571,40.4361746731977,42.133177600113,41.263404973696,39.733118755557,39.5187669565474,39.4303324711022,38.6951236005095,38.866131647442,39.4792637211493,40.5436447813297,38.1466922889563,38.8392321103639,38.0671038965602,40.7407337347212,38.4567455417482],[-99.4031115215078,-99.4365389361773,-99.4246122494368,-97.7444912696844,-99.9663289349322,-97.8150279583334,-99.8096350206524,-97.440328538527,-99.9959180829223,-97.5079385723673,-99.2640873930896,-98.6632505686151,-96.6840696040649,-99.1155383977459,-99.3704453111868,-98.7563376558449,-98.1549638785363,-98.0270898749692,-99.5822805327036,-99.3792775621685,-98.5281919736584,-97.7776697842315,-100.005054624006,-97.8214280652099,-97.7064183870965,-100.227373998666,-99.6700371697748,-100.155895410638,-99.5781925358911,-97.620433676466,-99.7060162321028,-99.609969899996,-98.7878501990695,-96.8359098528208,-100.952272207516,-100.339145680984,-99.0449931210244,-98.3508487987613,-98.535298612049,-98.9648824359866,-97.7356425386307,-99.8776478321434,-98.7579382831164,-98.2894946500487,-99.1137931394451,-98.8765563201972,-99.959006453535,-98.8124677657264,-99.8842913983797,-99.0781135574828,-98.9829666496555,-97.4377837020935,-99.5748767980801,-102.120832757987,-99.1841888323643,-97.9951074181399,-98.2157173845503,-97.2019255869714,-100.448775296717,-98.9293247099029,-99.5236733889587,-99.0057969141682,-99.2406597576462,-98.6769463185042,-99.2459554780613,-97.9378028440888,-98.9284288088449,-98.081239329316,-97.937547254781,-100.379873579289,-99.5410259028025,-99.8453595293545,-99.2754541818463,-100.814907192634,-98.7722860093183,-98.4067122761724,-98.3441405155426,-97.0735130136506,-98.6212777165603,-97.3242024269533,-98.9581017207453,-97.8509250109279,-97.9999040319384,-98.7931798857574,-99.0434035904057,-97.560415072521,-98.9820907656726,-99.2684795078084,-99.3703477337757,-97.2180735251907,-100.038342508862,-99.7392021234597,-98.5876169816096,-99.0360839471742,-99.9341243244715,-99.0327158695709,-97.7451290323531,-99.0920898781746,-99.4569806744467,-99.3875080125583],10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#03F\",\"fillOpacity\":0.2},null,null,[\"Consumers: 1828, Access: 9.10325522167402e-05\",\"Consumers: 3226, Access: 6.53813321118809e-05\",\"Consumers: 16, Access: 0.000175331101727173\",\"Consumers: 351, Access: 6.66605786277059e-05\",\"Consumers: 788, Access: 0.000122311643586035\",\"Consumers: 3706, Access: 6.66605786277059e-05\",\"Consumers: 365, Access: 6.53813321118809e-05\",\"Consumers: 4864, Access: 6.66605786277059e-05\",\"Consumers: 106, Access: 0.000154881750741688\",\"Consumers: 4333, Access: 2.0550760378134e-05\",\"Consumers: 4230, Access: 3.24452454192791e-05\",\"Consumers: 1569, Access: 3.38297384279833e-05\",\"Consumers: 2880, Access: 0.000297707651086633\",\"Consumers: 1686, Access: 4.93517019950454e-05\",\"Consumers: 3657, Access: 9.10325522167402e-05\",\"Consumers: 532, Access: 4.95042530866785e-05\",\"Consumers: 1683, Access: 3.89301981547086e-05\",\"Consumers: 1475, Access: 1.93188184610629e-05\",\"Consumers: 1509, Access: 5.21023540620316e-05\",\"Consumers: 780, Access: 3.70454957796715e-05\",\"Consumers: 2560, Access: 3.25977965109122e-05\",\"Consumers: 1992, Access: 6.66605786277059e-05\",\"Consumers: 2224, Access: 0.000154881750741688\",\"Consumers: 1150, Access: 6.66605786277059e-05\",\"Consumers: 3002, Access: 2.0550760378134e-05\",\"Consumers: 2838, Access: 6.86428311008486e-05\",\"Consumers: 3036, Access: 6.53813321118809e-05\",\"Consumers: 3963, Access: 5.17363745250823e-05\",\"Consumers: 2889, Access: 8.19218091506979e-05\",\"Consumers: 2755, Access: 3.98695788391969e-05\",\"Consumers: 145, Access: 6.53813321118809e-05\",\"Consumers: 409, Access: 0.000139258377781977\",\"Consumers: 693, Access: 3.70454957796715e-05\",\"Consumers: 4008, Access: 2.0550760378134e-05\",\"Consumers: 612, Access: 3.25701071556525e-05\",\"Consumers: 1196, Access: 3.25701071556525e-05\",\"Consumers: 3825, Access: 1.32789780498493e-05\",\"Consumers: 4843, Access: 5.31485568890462e-05\",\"Consumers: 3432, Access: 3.38297384279833e-05\",\"Consumers: 4410, Access: 3.24452454192791e-05\",\"Consumers: 3292, Access: 3.98695788391969e-05\",\"Consumers: 2575, Access: 6.50153525749316e-05\",\"Consumers: 906, Access: 3.62252750368292e-05\",\"Consumers: 2112, Access: 0.000100361218307781\",\"Consumers: 794, Access: 9.10325522167402e-05\",\"Consumers: 755, Access: 1.32789780498493e-05\",\"Consumers: 3114, Access: 5.21023540620316e-05\",\"Consumers: 263, Access: 1.32789780498493e-05\",\"Consumers: 3812, Access: 0.000124724935301398\",\"Consumers: 3351, Access: 1.32789780498493e-05\",\"Consumers: 3818, Access: 6.26967158845308e-05\",\"Consumers: 3568, Access: 3.98695788391969e-05\",\"Consumers: 4780, Access: 9.87996465411381e-05\",\"Consumers: 2330, Access: 0.000429184549356223\",\"Consumers: 1685, Access: 4.93517019950454e-05\",\"Consumers: 3910, Access: 2.0550760378134e-05\",\"Consumers: 3414, Access: 1.93188184610629e-05\",\"Consumers: 4450, Access: 4.7341760166643e-05\",\"Consumers: 657, Access: 5.17363745250823e-05\",\"Consumers: 1369, Access: 9.10325522167402e-05\",\"Consumers: 4487, Access: 9.10325522167402e-05\",\"Consumers: 19, Access: 1.32789780498493e-05\",\"Consumers: 326, Access: 4.93517019950454e-05\",\"Consumers: 138, Access: 3.70454957796715e-05\",\"Consumers: 1269, Access: 3.70454957796715e-05\",\"Consumers: 1254, Access: 6.66605786277059e-05\",\"Consumers: 3737, Access: 8.31762735814273e-05\",\"Consumers: 2206, Access: 2.0550760378134e-05\",\"Consumers: 2096, Access: 2.0550760378134e-05\",\"Consumers: 2351, Access: 2.83358363322093e-05\",\"Consumers: 1726, Access: 6.53813321118809e-05\",\"Consumers: 4818, Access: 0.000154881750741688\",\"Consumers: 1205, Access: 4.93517019950454e-05\",\"Consumers: 174, Access: 5.60821042005496e-05\",\"Consumers: 4183, Access: 4.95042530866785e-05\",\"Consumers: 708, Access: 3.89301981547086e-05\",\"Consumers: 124, Access: 3.38297384279833e-05\",\"Consumers: 479, Access: 0.000318258411464767\",\"Consumers: 4601, Access: 4.95042530866785e-05\",\"Consumers: 2382, Access: 2.0550760378134e-05\",\"Consumers: 2875, Access: 1.32789780498493e-05\",\"Consumers: 2584, Access: 3.89301981547086e-05\",\"Consumers: 2077, Access: 3.98695788391969e-05\",\"Consumers: 1389, Access: 1.32789780498493e-05\",\"Consumers: 821, Access: 3.70454957796715e-05\",\"Consumers: 4584, Access: 2.0550760378134e-05\",\"Consumers: 1617, Access: 6.26967158845308e-05\",\"Consumers: 3142, Access: 9.10325522167402e-05\",\"Consumers: 286, Access: 4.93517019950454e-05\",\"Consumers: 1268, Access: 1.93188184610629e-05\",\"Consumers: 233, Access: 6.86428311008486e-05\",\"Consumers: 3695, Access: 0.000122311643586035\",\"Consumers: 1728, Access: 0.000119401548618257\",\"Consumers: 4953, Access: 4.93517019950454e-05\",\"Consumers: 1572, Access: 6.53813321118809e-05\",\"Consumers: 4101, Access: 0.000100082730157194\",\"Consumers: 1244, Access: 6.66605786277059e-05\",\"Consumers: 4969, Access: 0.000100082730157194\",\"Consumers: 2970, Access: 6.53813321118809e-05\",\"Consumers: 1789, Access: 0.000156164834357743\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null,null]},{\"method\":\"addCircles\",\"args\":[[40.9328430719071,41.2830558531629,38.8828696332502,39.379788058944,40.450178382641,40.1420687633829,41.4354086610569,41.8484643097009,39.4353413902868,38.3304102200298,39.6383664228608,38.1281837941303,38.4734402347985,41.4492463140651,38.3170321103816],[-102.048462339926,-99.393564517136,-99.3662196117869,-97.9063168026504,-97.668636822785,-99.099938279411,-96.8204235847808,-98.5496390354004,-99.8564922223597,-99.3491386565306,-100.389391593237,-98.7713769046231,-97.6006779011566,-99.8403112541498,-100.322648686606],10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#000\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#000\",\"fillOpacity\":0.2},null,null,[\"Provider 1\",\"Provider 2\",\"Provider 3\",\"Provider 4\",\"Provider 5\",\"Provider 6\",\"Provider 7\",\"Provider 8\",\"Provider 9\",\"Provider 10\",\"Provider 11\",\"Provider 12\",\"Provider 13\",\"Provider 14\",\"Provider 15\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null,null]}],\"limits\":{\"lat\":[37.8108,42.1495],\"lng\":[-102.120832757987,-96.6840696040649]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reference/catchment_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a network of consumers and providers — catchment_network","title":"Extract a network of consumers and providers — catchment_network","text":"Extract interconnected set consumers providers set connections within catchment areas.","code":""},{"path":"/reference/catchment_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a network of consumers and providers — catchment_network","text":"","code":"catchment_network(connections, from_start = NULL, to_start = NULL)"},{"path":"/reference/catchment_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a network of consumers and providers — catchment_network","text":"connections list- matrix-like object \"\" \"\" entries, returned catchment_connections. from_start, to_start ID (consumer) (provider) connections trace network.","code":""},{"path":"/reference/catchment_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a network of consumers and providers — catchment_network","text":"subsetted version connections containing connections traceable from_startand/to_start.","code":""},{"path":"/reference/catchment_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a network of consumers and providers — catchment_network","text":"","code":"pop <- simulate_catchments() connections <- catchment_connections(   pop$consumers, pop$providers,   weight = 1, max_cost = .5, ) catchment_network(connections, 1) #>     from to weight      cost #> 1      1  2      1 0.3029895 #> 4      4  4      1 0.3748512 #> 7      4  7      1 0.4827988 #> 17    10  4      1 0.3543607 #> 18    12  2      1 0.2657239 #> 110   14 11      1 0.3543165 #> 111   16  2      1 0.4136151 #> 115   21  2      1 0.4399042 #> 116   23  4      1 0.2968683 #> 118   25  2      1 0.1253776 #> 119   26  2      1 0.4574345 #> 120   27  2      1 0.3036755 #> 123   32 11      1 0.3236786 #> 41    35  4      1 0.3339723 #> 71    35  7      1 0.3419119 #> 130   45  2      1 0.4680699 #> 132   47  2      1 0.1657184 #> 135   51  2      1 0.3960161 #> 136   52 11      1 0.4461138 #> 142   61  7      1 0.1788004 #> 144   63  2      1 0.3661353 #> 146   66  2      1 0.3985169 #> 21    67  2      1 0.4501605 #> 42    67  4      1 0.4275167 #> 148   69  2      1 0.4192324 #> 154   79  2      1 0.4062638 #> 157   83  4      1 0.2198591 #> 159   86  2      1 0.3829023 #> 161   89  2      1 0.4884135 #> 72    90  7      1 0.4972486 #> 11    90 11      1 0.4631519 #> 22    97  2      1 0.3308725 #> 43    97  4      1 0.4988840 #> 164   98 11      1 0.3492573 #> 166  100  7      1 0.2821360"},{"path":"/reference/catchment_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Floating Catchment Area Ratios — catchment_ratio","title":"Calculate Floating Catchment Area Ratios — catchment_ratio","text":"Calculate provider (supply) consumer (demand) ratios within floating catchment areas.","code":""},{"path":"/reference/catchment_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Floating Catchment Area Ratios — catchment_ratio","text":"","code":"catchment_ratio(consumers = NULL, providers = NULL, cost = NULL,   weight = NULL, normalize_weight = FALSE, scale = 2, max_cost = NULL,   adjust_consumers = NULL, adjust_providers = NULL,   return_type = \"original\", consumers_commutes = NULL,   consumers_id = \"GEOID\", consumers_value = \"count\",   consumers_location = c(\"X\", \"Y\"), providers_id = \"GEOID\",   providers_value = \"count\", providers_location = c(\"X\", \"Y\"),   verbose = FALSE)  catchment_weight(cost, weight = NULL, max_cost = NULL, scale = 2,   normalize_weight = FALSE, verbose = FALSE)"},{"path":"/reference/catchment_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Floating Catchment Area Ratios — catchment_ratio","text":"consumers Number consumers (demand); either vector consumer amounts (population counts), matrix-like object column IDs (located consumers_id) column amounts (located consumers_value). providers Number providers (supply); either vector provider amounts (number doctors), matrix-like object column IDs (located providers_id) column amounts (located providers_value). cost matrix-like object cost associated pair consumers providers (distance travel times), consumers rows providers columns. cost's dimensions c(length(consumers), length(providers)) consumers providers vectors, aligned name available (vector names _id columns). NULL, coordinate information looked consumers providers (based consumers_location providers_location), calculate Euclidean distances. Costs equal 0 treated missing, truly 0 costs set minimal value. weight Means defining catchment areas topology / friction / impedance. simplest single number representing maximum distance consumers providers (2-step floating catchment area; 2SFCA; Luo & Wang, 2003). enhancement list vectors two values : first distance, second weight associate distance (e.g., list(c(10, 1), c(20, .5)), give consumers within cost 10 full weight, within cost 20 half weight; enhanced 2-step floating catchment area; E2SFCA; Lou & Qi 2009). character, refers weighting function (kernel density 2-step floating catchment area; KD2SFCA; Dai, 2010; order gradual steepest costs 1 6): function, passed cost first argument -- output matrix convertible sparse matrix, dimensions cost. matrix-like object, converted sparse matrix. normalize_weight Logical; TRUE, weight row-normalized consumers weights spread across providers range. can help correct increased weight consumers range multiple providers. Selection weights like make difference 2- 3-step floating catchment areas (3SFCA; Wan, Zou, & Sternberg, 2012). scale Numeric scaling factor weight name decay function. max_cost Numeric limit cost. setting weight single value, specifying list steps weight (distant step effectively max_cost), although single-value weight exclusive (cost < weight) steps inclusive. useful weight weighing function, max_cost trim tail weight distribution. adjust_consumers, adjust_providers function adjust weights applied consumers providers; take sparse weight matrix first argument, return adjusted matrix type. example, square provider weights modified 2-step floating catchment area (M2SFCA; Delamater, 2013) adjust_providers = function(w) w ^ 2, standardize weights balanced floating catchment area (BFCA; Paez, Higgins, & Vivona, 2019) adjust_consumers =  function(w) w / rowSums(w) adjust_providers = function(w) sweep(w, 2, colSums(w), \"/\"). weights adjusted independently way, region scores likely longer sum sum providers (fewer total number providers distributed). return_type Determines values returned: \"original\" (default) providers per consumers (e.g., many, likely fractional, doctors accessible person within region), \"region\" number providers per consumers entry (consumers * original; e.g., many doctors accessible within region), \"normalized\" original divided sum(region) / sum(consumers). consumers_commutes square, consumers source x consumers origin matrix counts origins, used specify multiple possible origins consumer location (e.g., consumers living location 1 may work locations 1 3, first row consumers_commutes values columns 1 3). can also entered place consumers, assuming includes consumers (e.g., worker commute matrix, may need add non-workers diagonal, also consumers). consumers_id, consumers_value, consumers_location, providers_id, providers_value, providers_location Column names consumers /providers extract IDs, values, location data (referring single sf geometry column, multiple columns coordinates). can also used directly enter ID, value, /location vectors (matrices location coordinates). verbose Logical; TRUE, print logs, type floating catchment area calculated.","code":""},{"path":"/reference/catchment_ratio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Floating Catchment Area Ratios — catchment_ratio","text":"catchment_ratio: vector access score (determined return_type) entry consumers. catchment_weight: sparse matrix weights.","code":""},{"path":"/reference/catchment_ratio.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Floating Catchment Area Ratios — catchment_ratio","text":"Dai, D. (2010). Black residential segregation, disparities spatial access health care facilities, late-stage breast cancer diagnosis metropolitan Detroit. Health & place, 16, 1038-1052. doi: 10.1016/j.healthplace.2010.06.012 Delamater, P. L. (2013). Spatial accessibility suboptimally configured health care systems: modified two-step floating catchment area (M2SFCA) metric. Health & place, 24, 30-43. doi: 10.1016/j.healthplace.2013.07.012 Lou, W. & Qi, Y. (2009). enhanced two-step floating catchment area (E2SFCA) method measuring spatial accessibility primary care physicians. Health & Place, 15, 1100-1107. doi: 10.1016/j.healthplace.2009.06.002 Luo, W. & Wang, F. (2003). Measures spatial accessibility health care GIS environment: synthesis case study Chicago region. Environment Planning B: Planning Design, 30, 865-884. doi: 10.1068/b29120 Paez, ., Higgins, C. D., & Vivona, S. F. (2019). Demand level service inflation Floating Catchment Area (FCA) methods. Plos one, 14, e0218773. doi: 10.1371/journal.pone.0218773 Wan, N., Zou, B., & Sternberg, T. (2012). three-step floating catchment area method analyzing spatial access health services. International Journal Geographical Information Science, 26, 1073-1089. doi: 10.1080/13658816.2011.624987","code":""},{"path":"/reference/catchment_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Floating Catchment Area Ratios — catchment_ratio","text":"","code":"pop <- c(5, 10, 50) doc <- c(50, 100) travel_time <- matrix(c(5, 50, 25, 70, 40, 30), ncol = 2)  # 2-step floating catchment area catchment_ratio(pop, doc, travel_time, 30) #> [1] 0.9090909 0.0000000 0.9090909  # kernel density (Gaussian) 2-step floating catchment area catchment_ratio(pop, doc, travel_time, \"gaussian\") #> [1] 1.000000e+01 1.383897e-85 2.678637e-32  # enhanced 2-step floating catchment area step_weights <- list(c(60, .22), c(40, .68), c(20, 1)) catchment_ratio(pop, doc, travel_time, step_weights) #> [1] 1.213592 1.933657 2.491909  # modified 2-step floating catchment area catchment_ratio(pop, doc, travel_time, step_weights, adjust_providers = function(m) m^2) #> [1] 1.213592 1.192071 1.694498  # balanced 2-step floating catchment area catchment_ratio(   pop, doc, travel_time, step_weights,   adjust_consumers = function(w) sweep(w, 1, rowSums(w), \"/\", FALSE),   adjust_providers = function(w) sweep(w, 2, colSums(w), \"/\", FALSE), ) #> [1] 0.8111031 1.7142789 2.0873863  # 3-step floating catchment area catchment_ratio(pop, doc, travel_time, step_weights, normalize_weight = TRUE) #> [1] 2.218497 2.440125 2.290125  # visualized weight functions if (require(\"splot\", quietly = TRUE)) {   cost <- 1:10   scale <- 2   splot(list(     linear = (10 - cost) / 10,     gaussian = exp(-cost^2 / (2 * scale^2)),     dnorm = dnorm(cost, 0, scale),     pnorm = pnorm(-cost, 0, scale),     gravity = sqrt(1 / cost^scale),     logarithmic = 1 / (1 + log(cost, scale)),     logistic = 1 / (1 + exp(scale * cost)),     exponential = exp(-cost * scale)   ) ~ cost, title = \"Decay Functions\", laby = \"Weight\", labx = \"Cost\", lines = \"con\", note = FALSE) }   # gives weight only to costs under 2 catchment_weight(matrix(c(1, 2, 1, 3, 1, 2), 3), 2) #> 3 x 2 sparse Matrix of class \"dgCMatrix\" #>          #> [1,] 1 . #> [2,] . 1 #> [3,] 1 ."},{"path":"/reference/download_census_population.html","id":null,"dir":"Reference","previous_headings":"","what":"Download U.S. Census Population Data — download_census_population","title":"Download U.S. Census Population Data — download_census_population","text":"Download load U.S. census American Community Survey 5-year summary files block group level, optionally including home-work commute statistics.","code":""},{"path":"/reference/download_census_population.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download U.S. Census Population Data — download_census_population","text":"","code":"download_census_population(dir, state, year = 2019,   include_margins = FALSE, include_commutes = FALSE, counties = NULL,   tracts = NULL, blockgroups = NULL, overwrite = FALSE, verbose = TRUE)"},{"path":"/reference/download_census_population.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download U.S. Census Population Data — download_census_population","text":"dir Directory save file(s). state Name, abbreviation, FIPS code state. year 4 digit year, 2009 recent year. include_margins Logical; TRUE, save include estimate margins error, data.frame dimensions estimates data.frame. include_commutes Logical; TRUE, download Longitudinal Employer-Household Dynamics (LEHD) Origin-Destination Employment Statistics (LODES) data state block groups within selected tracts. counties, tracts, blockgroups vector counties, tracts, block group GEOIDs within specified state filter block groups (block groups within specified counties tracts, matching specified block group GEOID). one can specified (lower levels overwrite higher levels). Defaults block groups. overwrite Logical; TRUE, remove existing files downloading saving new versions. verbose Logical; FALSE, print status messages.","code":""},{"path":"/reference/download_census_population.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download U.S. Census Population Data — download_census_population","text":"list least estimates entry, optionally margins /commutesentries. extimates margins entries data.frames block groups rows, population variables columns, person counts cells. commutes entry sparse matrix home block groups rows, work block groups columns, job counts cells (jobs, summed across blocks).","code":""},{"path":"/reference/download_census_population.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download U.S. Census Population Data — download_census_population","text":"","code":"if (FALSE) { download_census_population(\".\", \"va\") }"},{"path":"/reference/simulate_catchments.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Catchment Areas — simulate_catchments","title":"Simulate Catchment Areas — simulate_catchments","text":"Generate random population consumers providers.","code":""},{"path":"/reference/simulate_catchments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Catchment Areas — simulate_catchments","text":"","code":"simulate_catchments(n = 100, weight = 1, ..., consumers_range = c(10,   5000), long_center = -99, long_spread = 1, lat_center = 40,   lat_spread = 1, as_sf = TRUE)"},{"path":"/reference/simulate_catchments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Catchment Areas — simulate_catchments","text":"n Number consumers generate. weight Weight method used Euclidean distances consumers providers. ... Passes additional arguments catchment_weight. consumers_range numeric vector entries minimal maximal consumer counts sample. long_center Longitude randomly place consumers around. long_spread Standard deviation consumer's longitude distribution. lat_center Latitude randomly place consumers around. lat_spread Standard deviation consumer's latitude distribution. as_sf Logical; FALSE, consumer provider data returned regular data.frames.","code":""},{"path":"/reference/simulate_catchments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Catchment Areas — simulate_catchments","text":"list consumers, providers, cost, weight entries.","code":""},{"path":"/reference/simulate_catchments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Catchment Areas — simulate_catchments","text":"","code":"pop <- simulate_catchments() if (require(\"leaflet\", quiet = TRUE)) {   leaflet(pop$providers) |>     addCircles(       radius = 1e5, color = \"#666\", stroke = FALSE     ) |>     addCircles(       data = pop$consumers, label = ~ paste0(\"Consumers: \", count, \", Access: \", access)     ) |>     addCircles(       color = \"#000\", label = ~ paste(\"Provider\", id)     ) }  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addCircles\",\"args\":[[40.4701367812221,39.0142800792678,40.0184531359243,40.0025034450022,38.3397670395956,39.1019623731957,41.1851721399226,41.6472749906728,41.0670127567981,38.0118598368947,42.1469844846291,38.5002647369147],[-101.548003239456,-98.4739322704685,-97.7330401643106,-99.2665597879083,-99.0574018925092,-99.938184216679,-98.2941648786484,-97.9123410282423,-99.5525718819744,-96.7682820900715,-99.640104681895,-97.8239514417785],100000,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":false,\"color\":\"#666\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#666\",\"fillOpacity\":0.2},null,null,null,{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null,null]},{\"method\":\"addCircles\",\"args\":[[40.1593094781205,38.6031981441543,39.9640044207244,40.0052613437524,38.0767794833876,39.1110572230048,39.1304972404288,39.6952643617497,38.7699229208083,40.4453668621872,39.2445138475382,40.7904234632456,39.7666452536253,39.6854046726005,39.4917373075607,41.4353335620809,41.8647230520132,40.7412000959707,41.3082486305654,39.51700102508,38.9001777961968,40.9485982349433,40.103032549893,40.3189232029058,40.0439707986867,39.9242298916708,38.2470707514677,40.3473319742883,38.8364626199145,40.6490955805279,40.7793008075786,38.4992018283865,39.5073643916885,39.7234156651006,41.6185921807126,40.4389132062486,41.4813476632546,39.4187336130399,40.0196444731227,40.3260911539289,39.8963537357859,40.4816535046816,39.6371976798951,41.1147037713367,40.4972650885996,39.9177515730007,41.4786584364627,39.1062447384528,37.9589091397262,39.3089386759619,39.9543923117964,40.6665572000948,39.7375764206269,37.8824383509114,39.4525366431911,39.8621707480126,42.7117163988676,40.6973327535162,40.7045192049444,39.1694799907652,38.920830775373,38.2074236098343,39.7867387903994,41.9209751541582,40.3274544685962,39.1279675811424,39.5792865103144,40.7993869186423,40.0296824140329,41.8164409890699,38.4089736489665,41.0481268453241,38.5144193211763,41.5484834718577,39.0295793293638,37.7225790314121,40.5486925613136,39.8716744216042,41.8896656751111,39.651757350997,39.060343092953,39.0790539632399,40.6466350199735,38.37086305147,42.1489948458455,40.657645038844,41.0695094264358,39.3469072684623,38.5834302965597,41.4286512751766,39.7805970188094,39.8051472931631,41.6245323323401,40.4081602204827,40.3476265678698,39.4387499153017,40.1551048350328,38.5367235529001,40.3674929481187,41.1640148576128],[-100.600188289813,-98.2854923026127,-97.4247943300748,-99.4104563528159,-99.2182249348106,-98.6407834483797,-98.7448774127276,-99.9151076786337,-100.176213464619,-98.9385456109089,-98.8466166773421,-98.8767360525756,-99.8456400991659,-100.077238637675,-99.543877677664,-98.2881657196439,-97.5006884016861,-97.3754210245223,-99.4869659185832,-98.5994857631352,-97.7384539696015,-99.7080844675354,-98.3346445251188,-98.7959612911944,-99.5100072796688,-98.5030583701071,-96.4499539612557,-97.7870602068233,-100.16670157841,-98.6064462917634,-99.483518568129,-99.3108866771658,-99.5028792116228,-98.7578696198463,-100.305462808898,-98.7380007641499,-97.7123418938819,-98.4944392947136,-99.9123819472614,-98.0281136607959,-98.2498177807621,-101.559301706861,-99.3211433058359,-99.7148289004856,-98.889647405861,-99.2357935642024,-99.8708966945669,-98.3819993266976,-99.2469893602566,-98.9169084405547,-99.2223979864328,-99.1132501715712,-99.4581005924432,-96.8089274167169,-100.37256916107,-98.5782648351009,-99.2979563116648,-97.1610760174112,-98.5898020624259,-97.6132551678617,-100.21851437319,-97.8472589641226,-99.7815446806885,-99.88804055981,-99.9780860720285,-99.1904141190609,-98.0056727373274,-99.3429846851999,-98.8407511580393,-98.4172337559019,-100.322594560523,-98.3817033276189,-98.5865580542338,-98.4670126511899,-98.8019438564672,-97.2051263205648,-99.788722974222,-100.413832425902,-99.6547907609472,-97.9269470144744,-99.6253410278474,-99.0219407885648,-97.3604280703292,-96.3545394544026,-100.13491677935,-98.1763266670684,-99.5526044711169,-97.6139031455472,-98.9761909280457,-98.7598846705957,-98.6021885497483,-97.9038989245378,-100.489915608694,-99.4242647819372,-97.5477746376745,-98.3586311022932,-99.0687677486895,-97.8790768925441,-99.4082257856375,-100.04606068453],10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#03F\",\"fillOpacity\":0.2},null,null,[\"Consumers: 3138, Access: 0.000152392563242914\",\"Consumers: 3564, Access: 0.000103015179061936\",\"Consumers: 4942, Access: 1.75799447989733e-05\",\"Consumers: 3795, Access: 1.13275940190304e-05\",\"Consumers: 3024, Access: 2.9772537811123e-05\",\"Consumers: 4993, Access: 4.55703261207597e-05\",\"Consumers: 3613, Access: 4.55703261207597e-05\",\"Consumers: 144, Access: 3.41471823536568e-05\",\"Consumers: 3566, Access: 2.28195883346264e-05\",\"Consumers: 3961, Access: 6.31976501846415e-05\",\"Consumers: 580, Access: 5.689792013979e-05\",\"Consumers: 2803, Access: 6.31976501846415e-05\",\"Consumers: 628, Access: 3.41471823536568e-05\",\"Consumers: 844, Access: 3.41471823536568e-05\",\"Consumers: 1205, Access: 3.41471823536568e-05\",\"Consumers: 854, Access: 0.000135735962172822\",\"Consumers: 514, Access: 0.000108049702863317\",\"Consumers: 4093, Access: 1.75799447989733e-05\",\"Consumers: 1922, Access: 7.27864700031295e-05\",\"Consumers: 3541, Access: 2.7125382328667e-05\",\"Consumers: 674, Access: 7.32426412508131e-05\",\"Consumers: 2115, Access: 2.41837968561064e-05\",\"Consumers: 2076, Access: 2.89075388180037e-05\",\"Consumers: 2397, Access: 1.13275940190304e-05\",\"Consumers: 4597, Access: 1.13275940190304e-05\",\"Consumers: 3159, Access: 4.47053271276403e-05\",\"Consumers: 141, Access: 8.99523252676082e-05\",\"Consumers: 4356, Access: 4.5266204108478e-05\",\"Consumers: 4803, Access: 2.28195883346264e-05\",\"Consumers: 4934, Access: 3.90138533285351e-05\",\"Consumers: 1660, Access: 3.55113908751368e-05\",\"Consumers: 467, Access: 6.83899144553861e-05\",\"Consumers: 4113, Access: 3.41471823536568e-05\",\"Consumers: 3807, Access: 2.7125382328667e-05\",\"Consumers: 1386, Access: 7.27864700031295e-05\",\"Consumers: 4879, Access: 3.90138533285351e-05\",\"Consumers: 1773, Access: 0.000135735962172822\",\"Consumers: 902, Access: 4.47053271276403e-05\",\"Consumers: 300, Access: 3.41471823536568e-05\",\"Consumers: 2708, Access: 4.5266204108478e-05\",\"Consumers: 1763, Access: 3.337773310861e-05\",\"Consumers: 3424, Access: 0.000152392563242914\",\"Consumers: 2551, Access: 3.41471823536568e-05\",\"Consumers: 1243, Access: 2.41837968561064e-05\",\"Consumers: 317, Access: 6.31976501846415e-05\",\"Consumers: 3839, Access: 1.13275940190304e-05\",\"Consumers: 3815, Access: 7.27864700031295e-05\",\"Consumers: 1551, Access: 7.32426412508131e-05\",\"Consumers: 481, Access: 2.9772537811123e-05\",\"Consumers: 340, Access: 5.689792013979e-05\",\"Consumers: 767, Access: 1.13275940190304e-05\",\"Consumers: 557, Access: 6.31976501846415e-05\",\"Consumers: 2949, Access: 3.41471823536568e-05\",\"Consumers: 3831, Access: 8.99523252676082e-05\",\"Consumers: 4794, Access: 2.28195883346264e-05\",\"Consumers: 972, Access: 4.47053271276403e-05\",\"Consumers: 2959, Access: 4.86026731470231e-05\",\"Consumers: 4728, Access: 1.75799447989733e-05\",\"Consumers: 603, Access: 3.90138533285351e-05\",\"Consumers: 597, Access: 9.08225860497865e-05\",\"Consumers: 1643, Access: 2.28195883346264e-05\",\"Consumers: 3400, Access: 5.74448529411765e-05\",\"Consumers: 1360, Access: 3.41471823536568e-05\",\"Consumers: 1318, Access: 7.27864700031295e-05\",\"Consumers: 2092, Access: 3.55113908751368e-05\",\"Consumers: 3083, Access: 7.97175084744165e-05\",\"Consumers: 2870, Access: 3.337773310861e-05\",\"Consumers: 1467, Access: 3.55113908751368e-05\",\"Consumers: 3123, Access: 1.13275940190304e-05\",\"Consumers: 1920, Access: 0.000135735962172822\",\"Consumers: 2619, Access: 2.28195883346264e-05\",\"Consumers: 432, Access: 0.000135735962172822\",\"Consumers: 1487, Access: 0.000103015179061936\",\"Consumers: 1644, Access: 0.000135735962172822\",\"Consumers: 4752, Access: 4.55703261207597e-05\",\"Consumers: 3654, Access: 0.000147397178208785\",\"Consumers: 4549, Access: 3.55113908751368e-05\",\"Consumers: 4046, Access: 2.28195883346264e-05\",\"Consumers: 3550, Access: 7.27864700031295e-05\",\"Consumers: 3860, Access: 3.337773310861e-05\",\"Consumers: 3477, Access: 5.25921261457495e-05\",\"Consumers: 1230, Access: 7.97175084744165e-05\",\"Consumers: 3250, Access: 1.75799447989733e-05\",\"Consumers: 3491, Access: 8.99523252676082e-05\",\"Consumers: 1594, Access: 4.86026731470231e-05\",\"Consumers: 2260, Access: 4.5266204108478e-05\",\"Consumers: 1606, Access: 2.41837968561064e-05\",\"Consumers: 849, Access: 9.08225860497865e-05\",\"Consumers: 2497, Access: 4.55703261207597e-05\",\"Consumers: 2118, Access: 0.000159919759028928\",\"Consumers: 2216, Access: 4.47053271276403e-05\",\"Consumers: 3414, Access: 3.337773310861e-05\",\"Consumers: 4031, Access: 4.86026731470231e-05\",\"Consumers: 3298, Access: 3.55113908751368e-05\",\"Consumers: 2981, Access: 1.75799447989733e-05\",\"Consumers: 4887, Access: 3.337773310861e-05\",\"Consumers: 1321, Access: 1.13275940190304e-05\",\"Consumers: 1632, Access: 7.32426412508131e-05\",\"Consumers: 1321, Access: 3.55113908751368e-05\",\"Consumers: 252, Access: 2.41837968561064e-05\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null,null]},{\"method\":\"addCircles\",\"args\":[[40.4701367812221,39.0142800792678,40.0184531359243,40.0025034450022,38.3397670395956,39.1019623731957,41.1851721399226,41.6472749906728,41.0670127567981,38.0118598368947,42.1469844846291,38.5002647369147],[-101.548003239456,-98.4739322704685,-97.7330401643106,-99.2665597879083,-99.0574018925092,-99.938184216679,-98.2941648786484,-97.9123410282423,-99.5525718819744,-96.7682820900715,-99.640104681895,-97.8239514417785],10,null,null,{\"interactive\":true,\"className\":\"\",\"stroke\":true,\"color\":\"#000\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":\"#000\",\"fillOpacity\":0.2},null,null,[\"Provider 1\",\"Provider 2\",\"Provider 3\",\"Provider 4\",\"Provider 5\",\"Provider 6\",\"Provider 7\",\"Provider 8\",\"Provider 9\",\"Provider 10\",\"Provider 11\",\"Provider 12\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null,null]}],\"limits\":{\"lat\":[37.7225790314121,42.7117163988676],\"lng\":[-101.559301706861,-96.3545394544026]}},\"evals\":[],\"jsHooks\":[]}"}]
